#cloud-config
autoinstall:
  version: 1
# =============================================================================
# debug:
#   verbose: true
#   output:
# =============================================================================
  refresh-installer:
    update: true
    channel: latest/stable
#   channel: stable/ubuntu-$REL
#   channel: latest/edge
#   channel: latest/beta
# stable candidate edge beta
# =============================================================================
# apt:
#   disable_components: []
#   fallback: abort
#   geoip: true
#   mirror-selection:
#     primary:
#     - country-mirror
#     - arches:
#       - amd64
#       - i386
#       uri: http://archive.ubuntu.com/ubuntu
#     - arches:
#       - s390x
#       - arm64
#       - armhf
#       - powerpc
#       - ppc64el
#       - riscv64
#       uri: http://ports.ubuntu.com/ubuntu-ports
#   preserve_sources_list: false
# =============================================================================
  early-commands:
  - [ sh, -c, '
    exec 2>&1;
    export LANG=C;
    FUNC_NAME="early-commands";
    if [ -d "/target/." ]; then
        DIRS_TGET="/target";
    fi;
    LOGS_NAME="${DIRS_TGET:-}/var/adm/installer/${FUNC_NAME}.$(date +"%Y%m%d%H%M%S").log";
    mkdir -p "${LOGS_NAME%/*}";
    echo "### start ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";
    COMD_LINE="$(cat /proc/cmdline)";
    for LINE in ${COMD_LINE:-};
    do
      case "${LINE}" in
        debug | debugout | dbg) DBGS_FLAG="true";;
        *)  ;;
      esac;
    done;
    if [ "${DBGS_FLAG:-}" = "true" ]; then
      set -x;
      echo "### debug out ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";
      echo "${FUNC_NAME}: COMD_LINE=[${COMD_LINE:-}]" 2>&1 | tee -a "${LOGS_NAME}";
    fi;
    lvremove --select all -ff -y 2>&1 | tee -a "${LOGS_NAME}";
    vgremove --select all -ff -y 2>&1 | tee -a "${LOGS_NAME}";
    pvremove /dev/nvme0n1* -ff -y 2>&1 | tee -a "${LOGS_NAME}";
    dd if=/dev/zero of=/dev/nvme0n1 bs=1M count=10 2>&1 | tee -a "${LOGS_NAME}";
    if mountpoint -q /media; then
      umount -Rf /media 2>&1 | tee -a "${LOGS_NAME}" || umount -Rfl /media 2>&1 | tee -a "${LOGS_NAME}" || true;
    fi;
    {
      echo "nameserver 8.8.8.8";
      echo "nameserver 8.8.4.4";
    } >  /etc/resolv.conf;
    if [ ! -e /run/systemd/resolve/stub-resolv.conf ]; then
      mkdir -p /run/systemd/resolve 2>&1 | tee -a "${LOGS_NAME}";
      cp /etc/resolv.conf /run/systemd/resolve/stub-resolv.conf 2>&1 | tee -a "${LOGS_NAME}";
    fi;
    if command -v wireplumber > /dev/null 2>&1; then
      FILE_PATH="/etc/wireplumber/wireplumber.conf.d/50-alsa-config.conf";
      mkdir -p "${FILE_PATH%/*}";
      {
        echo "monitor.alsa.rules = [";
        echo "  {";
        echo "    matches = [";
        echo "      # This matches the value of the node.name property of the node.";
        echo "      {";
        echo "        node.name = \"~alsa_output.*\"";
        echo "      }";
        echo "    ]";
        echo "    actions = {";
        echo "      # Apply all the desired node specific settings here.";
        echo "      update-props = {";
        echo "        api.alsa.period-size   = 1024";
        echo "        api.alsa.headroom      = 8192";
        echo "        session.suspend-timeout-seconds = 0";
        echo "      }";
        echo "    }";
        echo "  }";
        echo "]";
      } > "${FILE_PATH}";
      runuser ubuntu --login --command "systemctl --user restart wireplumber.service || true";
    fi;
    echo "### complete ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";' ]
# =============================================================================
  storage:
    grub:
      reorder_uefi: false
    layout:
      name: lvm
      sizing-policy: all
      match:
        path: /dev/nvme0n1
#       ssd: true
    swap:
      size: 0
# -----------------------------------------------------------------------------
# /dev/nvme0n1p1: 512MB: /boot/efi
#      nvme0n1p2: 512MB: /boot
#      nvme0n1p3:    -1: vg00
# lv-root       :  100%: /
# storage:
#   config:
#   - { type: disk, ptable: gpt, path: /dev/nvme0n1, wipe: superblock-recursive, preserve: false, name: '', grub_device: false, id: disk-nvme0n1 }
#   - { type: partition, device: disk-nvme0n1, size: 512M, wipe: superblock, flag: boot, number: 1, preserve: false, grub_device: true, id: partition-0 }
#   - { type: partition, device: disk-nvme0n1, size: 512M, wipe: superblock,             number: 2, preserve: false,                    id: partition-1 }
#   - { type: partition, device: disk-nvme0n1, size:   -1, wipe: superblock,             number: 3, preserve: false,                    id: partition-2 }
#   - { type: lvm_volgroup, devices: [partition-2], preserve: false, name: vg00, id: lvm_volgroup-0 }
#   - { type: lvm_partition, volgroup: lvm_volgroup-0, size: 100%, wipe: superblock, preserve: false, name: lv-root, id: lvm_partition-0 }
#   - { type: format, fstype: fat32, volume: partition-0,     preserve: false, id: format-0 }
#   - { type: format, fstype: ext4,  volume: partition-1,     preserve: false, id: format-1 }
#   - { type: format, fstype: ext4,  volume: lvm_partition-0, preserve: false, id: format-2 }
#   - { type: mount, device: format-0, path: /boot/efi, id: mount-0 }
#   - { type: mount, device: format-1, path: /boot    , id: mount-1 }
#   - { type: mount, device: format-2, path: /        , id: mount-2 }
# -----------------------------------------------------------------------------
# /dev/nvme0n1p1: 512MB: /boot/efi
#      nvme0n1p2: 512MB: /boot
#      nvme0n1p3:    -1: vg00
# /dev/sda1:         -1: vg01
# lv-root       :  100%: /
# lv-home       :  100%: /home
# storage:
#   config:
#   - { type: disk, ptable: gpt, path: /dev/nvme0n1, wipe: superblock-recursive, preserve: false, name: '', grub_device: false, id: disk-nvme0n1 }
#   - { type: partition, device: disk-nvme0n1, size: 512M, wipe: superblock, flag: boot, number: 1, preserve: false, grub_device: true, id: partition-0 }
#   - { type: partition, device: disk-nvme0n1, size: 512M, wipe: superblock,             number: 2, preserve: false,                    id: partition-1 }
#   - { type: partition, device: disk-nvme0n1, size:   -1, wipe: superblock,             number: 3, preserve: false,                    id: partition-2 }
#   - { type: lvm_volgroup, devices: [partition-2], preserve: false, name: vg00, id: lvm_volgroup-0 }
#   - { type: lvm_partition, volgroup: lvm_volgroup-0, size: 100%, wipe: superblock, preserve: false, name: lv-root, id: lvm_partition-0 }
#   - { type: format, fstype: fat32, volume: partition-0,     preserve: false, id: format-0 }
#   - { type: format, fstype: ext4,  volume: partition-1,     preserve: false, id: format-1 }
#   - { type: format, fstype: ext4,  volume: lvm_partition-0, preserve: false, id: format-2 }
#   - { type: mount, device: format-0, path: /boot/efi, id: mount-0 }
#   - { type: mount, device: format-1, path: /boot    , id: mount-1 }
#   - { type: mount, device: format-2, path: /        , id: mount-2 }
#   - { type: disk, ptable: gpt, path: /dev/sda,     wipe: superblock-recursive, preserve: false, name: '', grub_device: false, id: disk-sda     }
#   - { type: partition, device: disk-sda,     size:   -1, wipe: superblock,             number: 1, preserve: false,                    id: partition-3 }
#   - { type: lvm_volgroup, devices: [partition-3], preserve: false, name: vg01, id: lvm_volgroup-1 }
#   - { type: lvm_partition, volgroup: lvm_volgroup-1, size: 100%, wipe: superblock, preserve: false, name: lv-home, id: lvm_partition-1 }
#   - { type: format, fstype: ext4,  volume: lvm_partition-1, preserve: false, id: format-3 }
#   - { type: mount, device: format-3, path: /home    , id: mount-3 }
# =============================================================================
  identity:
    hostname: sv-ubuntu.workgroup
    realname: 'Master'
    username: master
    password: '$6$kdHidDqdYa0d4aLf$qTAB/q6W7pi2wjNjSOs7r3CwzQfMdmqmmPR2qwgbLW44d5xJBtduoGgNJ.GpUWebQrOpy2QzUiH5AtrIeoLuh/'
#   plain_text_passwd: "master"
#   echo "master" | openssl passwd -6 -stdin
#   (run in an environment equivalent to the OS to be installed)
# =============================================================================
  locale: ja_JP.UTF-8
  keyboard:
    layout: jp
  timezone: Asia/Tokyo
# =============================================================================
# network:
#   version: 2
#   ethernets: {}
# -----------------------------------------------------------------------------
# network:
#   version: 2
#   ethernets:
#     any-ens:
#       match:
#         name: "en*"
#       dhcp4: true
#       dhcp6: true
#       ipv6-privacy: true
#     any-eth:
#       match:
#         name: "et*"
#       dhcp4: true
#       dhcp6: true
#       ipv6-privacy: true
# -----------------------------------------------------------------------------
# network:
#   version: 2
#   ethernets:
#     any:
#       match:
#         name: "en*"
#       dhcp4: false
#       addresses:
#       - 192.168.1.1/24
#       gateway4: 192.168.1.254
#       nameservers:
#         search:
#         - workgroup
#         addresses:
#         - ::1
#         - 127.0.0.1
#         - 192.168.1.254
#       dhcp6: true
#       ipv6-privacy: true
# =============================================================================
# ssh:
#   allow-pw: true
#   authorized-keys: []
#   install-server: true
# =============================================================================
# source:
#   id: ubuntu-server
#   search_drivers: true
#   id: ubuntu-desktop
#   search_drivers: true
# -----------------------------------------------------------------------------
# codecs:
#   install: true
# drivers:
#   install: true
# =============================================================================
# updates: security
  updates: all
  package_update: true
  package_upgrade: true
  packages:
  - apparmor
  - usrmerge
  - sudo
  - firewalld
  - traceroute
  - network-manager
  - bash-completion
  - build-essential
  - curl
  - vim
  - bc
  - tree
  - shellcheck
  - clamav
  - openssh-server
  - systemd
  - dnsmasq
  - dnsutils
  - apache2
  - samba
  - smbclient
  - cifs-utils
  - libnss-winbind
  - open-vm-tools
  - open-vm-tools-desktop
# - ubuntu-desktop
# - ubuntu-gnome-desktop
# - language-pack-ja
# - language-pack-gnome-ja
# - fonts-noto
# - im-config
# - zenity
# - ibus-mozc
# - fcitx5-mozc
# - mozc-utils-gui
# - gnome-shell-extensions
# - libreoffice-l10n-ja
# - libreoffice-help-ja
# - firefox-locale-ja
# - thunderbird
# - thunderbird-locale-ja
# - rhythmbox
# - ffmpeg
# - gstreamer1.0-libav
# -----------------------------------------------------------------------------
# - usrmerge
# - tftpd-hpa
# -----------------------------------------------------------------------------
# - kasumi
# - ibus-anthy
# - ibus-mozc
# - mozc-utils-gui
# -----------------------------------------------------------------------------
# - openvswitch-switch
# -----------------------------------------------------------------------------
# - pxelinux
# - syslinux-common
# - syslinux-efi
# -----------------------------------------------------------------------------
# - hdparm
# - nvme-cli
# -----------------------------------------------------------------------------
# - avahi-daemon
# - bind9
# - bind9utils
# - dnsutils
# - resolvconf
# - isc-dhcp-server
# - minidlna
# =============================================================================
  user-data:
    ntp:
      servers:
      - ntp.nict.jp
    runcmd:
    - [ sh, -c, '
      exec 2>&1;
      export LANG=C;
      FUNC_NAME="runcmd";
      if [ -d "/target/." ]; then
          DIRS_TGET="/target";
      fi;
      LOGS_NAME="${DIRS_TGET:-}/var/adm/installer/${FUNC_NAME}.$(date +"%Y%m%d%H%M%S").log";
      mkdir -p "${LOGS_NAME%/*}";
      echo "### start ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";
      echo "### complete ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";' ]
#   timezone: Asia/Tokyo
# =============================================================================
# runcmd:
# - export LANG=C;
#   echo "=== start runcmd ===";
#   echo "=== complete runcmd ===";
#   ls -l /etc/resolv.conf*;
#   rm /etc/resolv.conf;
#   ln -s /etc/resolv.conf.manually-configured /etc/resolv.conf;
#   ls -l /etc/resolv.conf*;
# =============================================================================
  power_state:
    delay: now
    mode: reboot
    message: Rebooting machine
    timeout: 2
    condition: true
# =============================================================================
  late-commands:
  - [ sh, -c, '
    exec 2>&1;
    export LANG=C;
    FUNC_NAME="late-commands";
    if [ -d "/target/." ]; then
        DIRS_TGET="/target";
    fi;
    LOGS_NAME="${DIRS_TGET:-}/var/adm/installer/${FUNC_NAME}.$(date +"%Y%m%d%H%M%S").log";
    mkdir -p "${LOGS_NAME%/*}";
    echo "### start ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";
    SEED_FILE="/";
    COMD_LINE="$(cat /proc/cmdline)";
    for LINE in ${COMD_LINE:-};
    do
      case "${LINE}" in
        debug | debugout | dbg         ) DBGS_FLAG="true"                     ;;
        iso-url=*.iso  | url=*.iso     )                                      ;;
        preseed/url=*  | url=*         ) SEED_FILE="${LINE#*url=}"            ;;
        preseed/file=* | file=*        ) SEED_FILE="${LINE#*file=}"           ;;
        ds=nocloud*                    ) SEED_FILE="${LINE#*ds=nocloud*=}";
                                         SEED_FILE="${SEED_FILE%%/}/user-data";;
        *)  ;;
      esac;
    done;
    if [ "${DBGS_FLAG:-}" = "true" ]; then
      set -x;
      echo "### debug out ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";
      echo "${FUNC_NAME}: COMD_LINE=[${COMD_LINE:-}]" 2>&1 | tee -a "${LOGS_NAME}";
      echo "${FUNC_NAME}: SEED_FILE=[${SEED_FILE:-}]" 2>&1 | tee -a "${LOGS_NAME}";
      echo "${FUNC_NAME}: DIRS_TGET=[${DIRS_TGET:-}]" 2>&1 | tee -a "${LOGS_NAME}";
    fi;
    echo "### initialization ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";
    SHEL_DIRS="/var/adm/installer/nocloud"
    SHEL_NAME="nocloud_late_command.sh";
    SHEL_FILE="${SEED_FILE%/*}/../${SHEL_NAME}";
    SHEL_EXEC="${SHEL_DIRS}/${SHEL_NAME}";
    SEED_PATH="${SHEL_DIRS}/${SEED_FILE##*/}";
    echo "### get seed  ${FUNC_NAME} [${SEED_FILE}] ###" 2>&1 | tee -a "${LOGS_NAME}";
    echo "### get shell ${FUNC_NAME} [${SHEL_FILE}] ###" 2>&1 | tee -a "${LOGS_NAME}";
    mkdir -p "${DIRS_TGET:-}${SHEL_DIRS}";
    case "${SEED_FILE}" in
      http://* | https://* ) wget -O "${DIRS_TGET:-}${SEED_PATH}" "${SEED_FILE}" 2>&1 | tee -a "${LOGS_NAME}";
                             wget -O "${DIRS_TGET:-}${SHEL_EXEC}" "${SHEL_FILE}" 2>&1 | tee -a "${LOGS_NAME}";;
      file://* | /*        ) cp -aL "${SEED_FILE#file:/}" "${DIRS_TGET:-}${SEED_PATH}" 2>&1 | tee -a "${LOGS_NAME}";
                             cp -aL "${SHEL_FILE#file:/}" "${DIRS_TGET:-}${SHEL_EXEC}" 2>&1 | tee -a "${LOGS_NAME}";;
      *)  ;;
    esac;
    if [ "${DBGS_FLAG:-}" = "true" ]; then
      echo "### debug out ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";
      echo "${FUNC_NAME}: SHEL_NAME=[${SHEL_NAME:-}]" 2>&1 | tee -a "${LOGS_NAME}";
      echo "${FUNC_NAME}: SHEL_FILE=[${SHEL_FILE:-}]" 2>&1 | tee -a "${LOGS_NAME}";
      echo "${FUNC_NAME}: SHEL_EXEC=[${SHEL_EXEC:-}]" 2>&1 | tee -a "${LOGS_NAME}";
      echo "${FUNC_NAME}: SEED_PATH=[${SEED_PATH:-}]" 2>&1 | tee -a "${LOGS_NAME}";
    fi;
    if [ -e "${DIRS_TGET:-}${SHEL_EXEC}" ]; then
      echo "### exec shell ${FUNC_NAME} [${DIRS_TGET:-}${SHEL_EXEC}] ###" 2>&1 | tee -a "${LOGS_NAME}";
      chmod +x "${DIRS_TGET:-}${SHEL_EXEC}";
      if [ -n "${DIRS_TGET:-}" ]; then
        if [ -n "${SUBIQUITY_ROOT:-}" ]; then
          echo "### exec shell ${FUNC_NAME} [curtin] [${DIRS_TGET:-}${SHEL_EXEC}] ###" 2>&1 | tee -a "${LOGS_NAME}";
          curtin in-target --target="${DIRS_TGET:-}" -- sh -c "${SHEL_EXEC}" 2>&1 | tee -a "${LOGS_NAME}";
        else
          echo "### exec shell ${FUNC_NAME} [in-target] [${DIRS_TGET:-}${SHEL_EXEC}] ###" 2>&1 | tee -a "${LOGS_NAME}";
          in-target --pass-stdout sh -c "${SHEL_EXEC}" 2>&1 | tee -a "${LOGS_NAME}";
        fi;
      fi;
      echo "### complete shell ${FUNC_NAME} [${DIRS_TGET:-}${SHEL_EXEC}] ###" 2>&1 | tee -a "${LOGS_NAME}";
    fi;
    echo "### complete ${FUNC_NAME} ###" 2>&1 | tee -a "${LOGS_NAME}";' ]
# =============================================================================
# memo:
#   https://ubuntu.com/server/docs/install/autoinstall-reference
#   https://github.com/canonical/cloud-init/
#   https://cloudinit.readthedocs.io/
#   https://curtin.readthedocs.io/
#   https://github.com/canonical/curtin
# =============================================================================
# Created at 202x/xx/xx xx:xx:xx
# === EOF =====================================================================
