<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <add-on t="map">
    <add_on_products t="list">
<!-- leap -->
      <listentry t="map">
        <alias>repo-oss</alias>
        <media_url>http://download.opensuse.org/distribution/leap/15.6/repo/oss/</media_url>
        <name>Main Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-update</alias>
        <media_url>http://download.opensuse.org/update/leap/15.6/oss/</media_url>
        <name>Main Update Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-sle-update</alias>
        <media_url>http://download.opensuse.org/update/leap/15.6/sle/</media_url>
        <name>Update repository with updates from SUSE Linux Enterprise 15</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-backports-update</alias>
        <media_url>http://download.opensuse.org/update/leap/15.6/backports/</media_url>
        <name>Update repository of openSUSE Backports</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
<!-- leap -->
<!-- leap non-oss
      <listentry t="map">
        <alias>repo-non-oss</alias>
        <media_url>http://download.opensuse.org/distribution/leap/15.6/repo/non-oss/</media_url>
        <name>Non-OSS Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-update-non-oss</alias>
        <media_url>http://download.opensuse.org/update/leap/15.6/non-oss/</media_url>
        <name>Update Repository (Non-Oss)</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-openh264</alias>
        <media_url>http://codecs.opensuse.org/openh264/openSUSE_Leap/</media_url>
        <name>Open H.264 Codec (openSUSE Leap)</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
leap non-oss -->
<!-- tumbleweed
      <listentry t="map">
        <alias>repo-oss</alias>
        <media_url>https://download.opensuse.org/tumbleweed/repo/oss/</media_url>
        <name>Main Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-update</alias>
        <media_url>https://download.opensuse.org/update/tumbleweed/</media_url>
        <name>Main Update Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
tumbleweed -->
    </add_on_products>
  </add-on>
  <bootloader t="map">
    <global t="map">
      <append>-B console=force-text</append>
      <cpu_mitigations>auto</cpu_mitigations>
    </global>
    <loader_type>grub2-efi</loader_type>
  </bootloader>
  <deploy_image t="map">
    <image_installation t="boolean">true</image_installation>
  </deploy_image>
  <general t="map">
    <self_update config:type="boolean">true</self_update>
<!--
    <semi-automatic config:type="list">
      <semi-automatic_entry>networking</semi-automatic_entry>
    </semi-automatic>
-->
    <mode t="map">
      <confirm t="boolean">false</confirm>
      <second_stage t="boolean">false</second_stage>
    </mode>
  </general>
<!-- fixed address
  <host t="map">
    <hosts t="list">
      <hosts_entry t="map">
        <host_address>192.168.1.1</host_address>
        <names t="list">
          <name>sv-opensuse.workgroup sv-opensuse</name>
        </names>
      </hosts_entry>
    </hosts>
  </host>
fixed address -->
  <language t="map">
    <language>ja_JP</language>
    <languages>ja_JP</languages>
  </language>
  <timezone t="map">
    <hwclock>UTC</hwclock>
    <timezone>Asia/Tokyo</timezone>
  </timezone>
  <networking t="map">
    <backend>network_manager</backend>
<!-- fixed address
    <dns t="map">
      <dhcp_hostname t="boolean">false</dhcp_hostname>
      <hostname>sv-opensuse.workgroup</hostname>
      <nameservers t="list">
        <nameserver>192.168.1.254</nameserver>
      </nameservers>
      <resolv_conf_policy>auto</resolv_conf_policy>
      <searchlist t="list">
        <search>workgroup</search>
      </searchlist>
    </dns>
    <interfaces t="list">
      <interface t="map">
        <bootproto>static</bootproto>
        <ipaddr>192.168.1.1</ipaddr>
        <name>eth0</name>
        <prefixlen>24</prefixlen>
        <startmode>auto</startmode>
      </interface>
    </interfaces>
    <ipv6 t="boolean">true</ipv6>
    <keep_install_network t="boolean">true</keep_install_network>
    <managed t="boolean">true</managed>
    <routing t="map">
      <routes t="list">
        <route t="map">
          <destination>default</destination>
          <device>eth0</device>
          <gateway>192.168.1.254</gateway>
          <netmask>-</netmask>
        </route>
      </routes>
    </routing>
fixed address -->
  </networking>
  <ntp-client t="map">
    <ntp_policy>auto</ntp_policy>
    <ntp_servers t="list">
      <ntp_server t="map">
        <address>ntp.nict.jp</address>
        <iburst t="boolean">true</iburst>
        <offline t="boolean">false</offline>
      </ntp_server>
    </ntp_servers>
    <ntp_sync>systemd</ntp_sync>
  </ntp-client>
  <partitioning t="list">
    <drive t="map">
      <device>/dev/nvme0n1</device>
      <initialize t="boolean">true</initialize>
      <partitions t="list"/>
      <type t="symbol">CT_DISK</type>
      <use>all</use>
    </drive>
  </partitioning>
  <proxy t="map">
    <enabled t="boolean">false</enabled>
  </proxy>
<!--
* pre-scripts (very early, before anything else really happens)
* postpartitioning-scripts (after partitioning and mounting to /mnt but before RPM installation)
* chroot-scripts (after the package installation, before the first boot)
* post-scripts (during the first boot of the installed system, no services running)
* init-scripts (during the first boot of the installed system, all services up and running)
-->
<!-- log's directory: /var/adm/autoinstall/logs/ -->
  <scripts t="map">
    <!-- *** pre-scripts *************************************************** -->
    <pre-scripts t="list">
      <script t="map">
        <debug t="boolean">false</debug>
        <feedback t="boolean">false</feedback>
        <feedback_type/>
        <filename>zzz_pre-scripts.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <notification/>
        <param-list t="list"/>
        <rerun t="boolean">false</rerun>
        <source><![CDATA[#!/bin/sh
  set -eu
  exec 2>&1
  export LANG=C
  _PROG_PATH="${0:-}"
  _PROG_NAME="${_PROG_PATH##*/}"
  _FUNC_NAME="${_PROG_NAME:-pre-scripts}"
  _COMD_LINE="$(cat /proc/cmdline)"
  for _LINE in ${_COMD_LINE}
  do
    case "${_LINE}" in
      debug              ) _FLAG_DBGS="true"; set -x;;
      debugout|dbg|dbgout) _FLAG_DBGS="true";;
      *) ;;
    esac
  done
  _DIRS_TGET="/mnt"
  if [ -n "${_DIRS_TGET}" ] && [ ! -d "${_DIRS_TGET}/root/." ]; then
    _DIRS_TGET=""
  fi
  _DIRS_INST="/var/adm/autoinst"
  _PATH_LOGS="${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log"
  mkdir -p "${_DIRS_TGET}${_DIRS_INST}"
  chmod 0600 "${_DIRS_TGET}${_DIRS_INST}"
  {
    printf "\033[m\033[42m%s\033[m\n" "Running ${_PROG_NAME}"
    _time_start=$(date +%s)
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"
    _PATH_SEED=""
    _PATH="/var/lib/cdebconf/questions.dat"
    if [ -f "${_PATH}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "find ${_PATH##*/}"
      _PATH_SEED="$(awk '$1=="Name:"&&($2=="preseed/url"||$2=="preseed/file"),$1=="" {if ($1=="Value:") {print $2;}}' "${_PATH}")"
      cp -a "${_PATH}" "${_DIRS_TGET}${_DIRS_INST}/"
    fi
    if [ -n "${AutoYaST:-}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "find AutoYaST=${AutoYaST}"
      _PATH_DEVS="${Device:-}"
      _PATH_SEED="${AutoYaST#*"${_PATH_DEVS}"}"
    fi
    _DIRS_COMD="${_PATH_SEED%/*}"
    _DIRS_COMD="${_DIRS_COMD%/*}/script"
    for _LINE in ${_COMD_LINE}
    do
      case "${_LINE}" in
        debug|debugout|dbg|dbgout ) _FLAG_DBGS="true";;
        iso-url=*.iso |url=*.iso  ) ;;
        preseed/url=* |url=*      ) _PATH_SEED="${_LINE#*url=}"
                                    _DIRS_COMD="${_PATH_SEED%/*}"
                                    _DIRS_COMD="${_DIRS_COMD%/*}/script";;
        preseed/file=*|file=*     ) _PATH_SEED="${_LINE#*file=}"
                                    _DIRS_COMD="${_PATH_SEED%/*}"
                                    _DIRS_COMD="${_DIRS_COMD%/*}/script";;
        ds=nocloud*               ) _PATH_SEED="${_LINE#*ds=nocloud*=}"
                                    _PATH_SEED="${_PATH_SEED%/}/user-data"
                                    _DIRS_COMD="${_PATH_SEED%/}"
                                    _DIRS_COMD="${_DIRS_COMD%/nocloud*}/script";;
        inst.ks=*                 ) _PATH_SEED="${_LINE#*inst.ks=}"
                                    case "${_PATH_SEED}" in
                                      http:*|https:*|ftp:*|tftp:*)
                                        _DIRS_COMD="${_PATH_SEED%/*}"
                                        _DIRS_COMD="${_DIRS_COMD%/*}/script";;
                                      hd:sr0:*|cdrom|cdrom:*)
                                        _PATH_SEED="/mnt/install/repo/${_PATH_SEED#*:*/}"
                                        _DIRS_COMD="${_PATH_SEED%/*}"
                                        _DIRS_COMD="${_DIRS_COMD%/*}/script";;
                                      nfs:*                 ) ;;
                                      hd:*                  ) ;;
                                      hmc                   ) ;;
                                      *) ;;
                                    esac;;
        autoyast=*                ) if [ -z "${AutoYaST:-}" ]; then
                                      _PATH_SEED="${_LINE#*autoyast=}"
                                      _DIRS_COMD="${_PATH_SEED%/*}"
                                      _DIRS_COMD="${_DIRS_COMD%/*}/script"
                                    fi;;
        *) ;;
      esac
    done
    if [ -n "${_FLAG_DBGS:-}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "debug print"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "LANG      " "${LANG:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_FUNC_NAME" "${_FUNC_NAME:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_DIRS_TGET" "${_DIRS_TGET:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_DIRS_INST" "${_DIRS_INST:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_PATH_LOGS" "${_PATH_LOGS:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_PATH_SEED" "${_PATH_SEED:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_DIRS_COMD" "${_DIRS_COMD:-}"
    fi
    _PATH="/run/systemd/resolve/stub-resolv.conf"
    if [ ! -e "${_PATH}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "copy ${_PATH##/*}"
      mkdir -p /run/systemd/resolve
      cp -p /etc/resolv.conf "${_PATH}"
    fi
    {
      echo "nameserver 8.8.8.8"
      echo "nameserver 8.8.4.4"
    } >>  /etc/resolv.conf
    if [ -n "${_PATH_SEED:-}" ]; then
      if [ -n "${_PATH_DEVS:-}" ]; then
        _PATH_DEVS="/dev/${_PATH_DEVS}"
        if [ -e "${_PATH_DEVS}" ]; then
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "mount: [${_PATH_DEVS}]"
          _MNTP="/tmp/autoinst-mnt"
          mkdir -p "${_MNTP}"
          mount -r "${_PATH_DEVS}" "${_MNTP}"
          _PATH_SEED="${_MNTP}${_PATH_SEED}"
          _DIRS_COMD="${_MNTP}${_DIRS_COMD}"
        fi
      fi
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "file copy"
      for _PATH in "${_PATH_SEED}"                       \
                   "${_DIRS_COMD}/autoinst_cmd_early.sh" \
                   "${_DIRS_COMD}/autoinst_cmd_late.sh"  \
                   "${_DIRS_COMD}/autoinst_cmd_part.sh"  \
                   "${_DIRS_COMD}/autoinst_cmd_run.sh"
      do
        printf "### %s: %s ###\n" "${_FUNC_NAME}" "copy: [${_PATH}]"
        case "${_PATH}" in
          http:*|https:*|ftp:*|tftp:*)
            if command -v wget > /dev/null 2>&1; then
              wget --output-document "${_DIRS_TGET:-}${_DIRS_INST}/${_PATH##*/}" "${_PATH}" || true
            else
              curl --location --http1.1 --no-progress-bar --remote-time --show-error --fail --retry-max-time 3 --retry 3 --connect-timeout 60 --progress-bar --continue-at - --create-dirs --output-dir "${_DIRS_TGET}${_DIRS_INST}" --output "${_PATH##*/}" "${_PATH}" || true
            fi;;
          file:*|/*                  ) cp -a "${_PATH#*:*//}" "${_DIRS_TGET}${_DIRS_INST}/" || true;;
          *) ;;
        esac
        if [ "${_PATH}" != "${_PATH_SEED}" ] && [ -e "${_DIRS_TGET}${_DIRS_INST}/${_PATH##*/}" ]; then
          chmod 0700 "${_DIRS_TGET}${_DIRS_INST}/${_PATH##*/}"
        fi
      done
      if [ -n "${_MNTP:-}" ]; then
        printf "### %s: %s ###\n" "${_FUNC_NAME}" "umount: [${_PATH_DEVS}]"
        umount "${_MNTP}"
      fi
    fi
    _PATH_EXEC="${_DIRS_TGET}${_DIRS_INST}/autoinst_cmd_part.sh"
    if [ -e "${_PATH_EXEC}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "exec: ${_PATH_EXEC}"
      sh -c "${_PATH_EXEC} nvme0n1"
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "complete: ${_PATH_EXEC}"
    fi
    _time_end=$(date +%s)
    _time_elapsed=$((_time_end-_time_start))
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"
    printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))
    printf "\033[m\033[42m%s\033[m\n" "Complete ${_PROG_NAME}"
  } >> "${_PATH_LOGS}" 2>&1
  exit 0]]></source>
      </script>
    </pre-scripts>
    <!-- *** postpartitioning-scripts ************************************** -->
    <postpartitioning-scripts t="list">
      <script t="map">
        <debug t="boolean">false</debug>
        <feedback t="boolean">false</feedback>
        <feedback_type/>
        <filename>zzz_postpartitioning-scripts.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <notification/>
        <param-list t="list"/>
        <rerun t="boolean">false</rerun>
        <source><![CDATA[#!/bin/sh
  set -eu
  exec 2>&1
  export LANG=C
  _PROG_PATH="${0:-}"
  _PROG_NAME="${_PROG_PATH##*/}"
  _FUNC_NAME="${_PROG_NAME:-postpartitioning-scripts}"
  _COMD_LINE="$(cat /proc/cmdline)"
  for _LINE in ${_COMD_LINE}
  do
    case "${_LINE}" in
      debug              ) _FLAG_DBGS="true"; set -x;;
      debugout|dbg|dbgout) _FLAG_DBGS="true";;
      *) ;;
    esac
  done
  _DIRS_TGET="/mnt"
  if [ -n "${_DIRS_TGET}" ] && [ ! -d "${_DIRS_TGET}/root/." ]; then
    _DIRS_TGET=""
  fi
  _DIRS_INST="/var/adm/autoinst"
  _PATH_LOGS="${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log"
  mkdir -p "${_DIRS_TGET}${_DIRS_INST}"
  chmod 0600 "${_DIRS_TGET}${_DIRS_INST}"
  {
    printf "\033[m\033[42m%s\033[m\n" "Running ${_PROG_NAME}"
    _time_start=$(date +%s)
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"
    _time_end=$(date +%s)
    _time_elapsed=$((_time_end-_time_start))
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"
    printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))
    printf "\033[m\033[42m%s\033[m\n" "Complete ${_PROG_NAME}"
  } >> "${_PATH_LOGS}" 2>&1
  exit 0]]></source>
      </script>
    </postpartitioning-scripts>
    <!-- *** chroot-scripts ************************************************ -->
    <chroot-scripts t="list">
      <script t="map">
        <chrooted t="boolean">false</chrooted>
        <debug t="boolean">false</debug>
        <feedback t="boolean">false</feedback>
        <feedback_type/>
        <filename>zzz_chroot-scripts.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <notification/>
        <param-list t="list"/>
        <rerun t="boolean">false</rerun>
        <source><![CDATA[#!/bin/sh
  set -eu
  exec 2>&1
  export LANG=C
  _PROG_PATH="${0:-}"
  _PROG_NAME="${_PROG_PATH##*/}"
  _FUNC_NAME="${_PROG_NAME:-chroot-scripts}"
  _COMD_LINE="$(cat /proc/cmdline)"
  for _LINE in ${_COMD_LINE}
  do
    case "${_LINE}" in
      debug              ) _FLAG_DBGS="true"; set -x;;
      debugout|dbg|dbgout) _FLAG_DBGS="true";;
      *) ;;
    esac
  done
  _DIRS_TGET="/mnt"
  if [ -n "${_DIRS_TGET}" ] && [ ! -d "${_DIRS_TGET}/root/." ]; then
    _DIRS_TGET=""
  fi
  _DIRS_INST="/var/adm/autoinst"
  _PATH_LOGS="${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log"
  mkdir -p "${_DIRS_TGET}${_DIRS_INST}"
  chmod 0600 "${_DIRS_TGET}${_DIRS_INST}"
  {
    printf "\033[m\033[42m%s\033[m\n" "Running ${_PROG_NAME}"
    _time_start=$(date +%s)
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"
    if [ -n "${_DIRS_TGET}" ] && [ -n "${_DIRS_INST}" ] && [ -d "${_DIRS_INST}"/. ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "file copy"
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "copy: ${_DIRS_INST}"
      mkdir -p "${_DIRS_TGET}${_DIRS_INST}"
      cp -a "${_DIRS_INST}"/. "${_DIRS_TGET}${_DIRS_INST}"
    fi
    _PATH_EXEC="${_DIRS_INST}/autoinst_cmd_late.sh"
    if [ -e "${_DIRS_TGET}${_PATH_EXEC}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "exec: ${_PATH_EXEC}"
      if [ -z "${_DIRS_TGET}" ]; then
        if sh -c "${_PATH_EXEC}"; then
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "complete: ${_PATH_EXEC}"
        else
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "failed: ${_PATH_EXEC}"
        fi
      else
        mount --rbind /dev  "${_DIRS_TGET}"/dev
        mount --rbind /proc "${_DIRS_TGET}"/proc
        mount --rbind /run  "${_DIRS_TGET}"/run
        mount --rbind /sys  "${_DIRS_TGET}"/sys
        mount --rbind /tmp  "${_DIRS_TGET}"/tmp
        mount --make-rslave "${_DIRS_TGET}"/dev
        mount --make-rslave "${_DIRS_TGET}"/sys
        systemctl daemon-reload || true
        if chroot "${_DIRS_TGET}"/ sh -c "${_PATH_EXEC}"; then
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "complete: ${_PATH_EXEC}"
        else
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "failed: ${_PATH_EXEC}"
        fi
#       umount -R "${_DIRS_TGET}" || true
      fi
    fi
    _time_end=$(date +%s)
    _time_elapsed=$((_time_end-_time_start))
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"
    printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))
    printf "\033[m\033[42m%s\033[m\n" "Complete ${_PROG_NAME}"
  } >> "${_PATH_LOGS}" 2>&1
  exit 0]]></source>
      </script>
    </chroot-scripts>
    <!-- *** post-scripts ************************************************** -->
    <post-scripts t="list">
      <script t="map">
        <debug t="boolean">false</debug>
        <feedback t="boolean">false</feedback>
        <feedback_type/>
        <filename>zzz_post-scripts.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <notification/>
        <param-list t="list"/>
        <rerun t="boolean">false</rerun>
        <source><![CDATA[#!/bin/sh
  set -eu
  exec 2>&1
  export LANG=C
  _PROG_PATH="${0:-}"
  _PROG_NAME="${_PROG_PATH##*/}"
  _FUNC_NAME="${_PROG_NAME:-post-scripts}"
  _COMD_LINE="$(cat /proc/cmdline)"
  for _LINE in ${_COMD_LINE}
  do
    case "${_LINE}" in
      debug              ) _FLAG_DBGS="true"; set -x;;
      debugout|dbg|dbgout) _FLAG_DBGS="true";;
      *) ;;
    esac
  done
  _DIRS_TGET="/mnt"
  if [ -n "${_DIRS_TGET}" ] && [ ! -d "${_DIRS_TGET}/root/." ]; then
    _DIRS_TGET=""
  fi
  _DIRS_INST="/var/adm/autoinst"
  _PATH_LOGS="${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log"
  mkdir -p "${_DIRS_TGET}${_DIRS_INST}"
  chmod 0600 "${_DIRS_TGET}${_DIRS_INST}"
  {
    printf "\033[m\033[42m%s\033[m\n" "Running ${_PROG_NAME}"
    _time_start=$(date +%s)
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"
    _time_end=$(date +%s)
    _time_elapsed=$((_time_end-_time_start))
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"
    printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))
    printf "\033[m\033[42m%s\033[m\n" "Complete ${_PROG_NAME}"
  } >> "${_PATH_LOGS}" 2>&1
  exit 0]]></source>
      </script>
    </post-scripts>
    <!-- *** init-scripts ************************************************** -->
    <init-scripts t="list">
      <script t="map">
        <debug t="boolean">false</debug>
        <filename>zzz_init-scripts.sh</filename>
        <location/>
        <source><![CDATA[#!/bin/sh
  set -eu
  exec 2>&1
  export LANG=C
  _PROG_PATH="${0:-}"
  _PROG_NAME="${_PROG_PATH##*/}"
  _FUNC_NAME="${_PROG_NAME:-init-scripts}"
  _COMD_LINE="$(cat /proc/cmdline)"
  for _LINE in ${_COMD_LINE}
  do
    case "${_LINE}" in
      debug              ) _FLAG_DBGS="true"; set -x;;
      debugout|dbg|dbgout) _FLAG_DBGS="true";;
      *) ;;
    esac
  done
  _DIRS_TGET="/mnt"
  if [ -n "${_DIRS_TGET}" ] && [ ! -d "${_DIRS_TGET}/root/." ]; then
    _DIRS_TGET=""
  fi
  _DIRS_INST="/var/adm/autoinst"
  _PATH_LOGS="${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log"
  mkdir -p "${_DIRS_TGET}${_DIRS_INST}"
  chmod 0600 "${_DIRS_TGET}${_DIRS_INST}"
  {
    printf "\033[m\033[42m%s\033[m\n" "Running ${_PROG_NAME}"
    _time_start=$(date +%s)
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"
    _time_end=$(date +%s)
    _time_elapsed=$((_time_end-_time_start))
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"
    printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))
    printf "\033[m\033[42m%s\033[m\n" "Complete ${_PROG_NAME}"
  } >> "${_PATH_LOGS}" 2>&1
  exit 0]]></source>
      </script>
    </init-scripts>
    <!-- *** scripts end *************************************************** -->
  </scripts>
  <services-manager t="map">
    <default_target>graphical</default_target>
    <services t="map">
      <enable t="list">
        <service>firewalld</service>
        <service>systemd-resolved</service>
        <service>systemd-timesyncd</service>
        <service>NetworkManager</service>
        <service>dnsmasq</service>
        <service>sshd</service>
        <service>apache2</service>
        <service>smb</service>
        <service>nmb</service>
        <service>winbind</service>
      </enable>
      <disable t="list">
<!--
        <service>avahi-daemon</service>
-->
        <service>wicked</service>
      </disable>
      <on_demand t="list">
<!--
        <listentry>pcscd</listentry>
-->
      </on_demand>
    </services>
  </services-manager>
  <software t="map">
    <install_recommended t="boolean">true</install_recommended>
    <instsource/>
    <packages t="list">
      <package>sudo</package>
      <package>firewalld</package>
      <package>traceroute</package>
      <package>NetworkManager</package>
      <package>bash-completion</package>
      <package>curl</package>
      <package>vim</package>
      <package>bc</package>
      <package>tree</package>
      <package>openssh-server</package>
      <package>systemd-network</package>
      <package>dnsmasq</package>
      <package>tftp</package>
      <package>bind-utils</package>
      <package>apache2</package>
      <package>samba</package>
      <package>samba-client</package>
      <package>cifs-utils</package>
      <package>samba-winbind</package>
      <package>open-vm-tools</package>
      <package>open-vm-tools-desktop</package>
      <package>fuse</package>
      <package>glibc-i18ndata</package>
      <package>glibc-locale</package>
      <package>less</package>
      <package>wget</package>
      <package>which</package>
      <package>zypper</package>
    </packages>
    <patterns t="list">
      <pattern>apparmor</pattern>
      <pattern>base</pattern>
      <pattern>basesystem</pattern>
      <pattern>documentation</pattern>
      <pattern>enhanced_base</pattern>
      <pattern>minimal_base</pattern>
<!-- desktop lxde -->
      <pattern>lxde</pattern>
<!-- desktop lxde -->
    </patterns>
    <products t="list">
      <product>Leap</product>
    </products>
  </software>
  <users t="list">
    <user t="map">
      <encrypted t="boolean">false</encrypted>
      <fullname>root</fullname>
      <user_password>r00t</user_password>
      <username>root</username>
    </user>
    <user t="map">
      <encrypted t="boolean">false</encrypted>
      <fullname>Master</fullname>
      <user_password>master</user_password>
      <username>master</username>
    </user>
  </users>
  <groups t="list">
    <group t="map">
      <groupname>wheel</groupname>
      <userlist>master</userlist>
    </group>
  </groups>
</profile>
<!-- https://doc.opensuse.org/projects/autoyast/ -->
<!-- https://doc.opensuse.org/documentation/leap/startup/html/book-startup/cha-boot-parameters.html -->
