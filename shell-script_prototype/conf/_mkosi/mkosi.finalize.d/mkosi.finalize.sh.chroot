#!/bin/bash

set -eu

declare -r    _PROG_NAME="${0##*/}"
declare -r    _FUNC_NAME="main"
printf "\033[m${_PROG_NAME}: \033[92m%s\033[m\n" "--- start   : [${_FUNC_NAME}] ---"
printf "\033[m${_PROG_NAME}: \033[92m%s\033[m\n" "distribution: ${DISTRIBUTION:-}"

if command -v systemd-detect-virt > /dev/null 2>&1; then
	__VERT="$(systemd-detect-virt || true)"
	printf "\033[m${_PROG_NAME}: \033[43m%s\033[m\n" " virtualized: ${__VERT:-}"
fi

declare -a    _LIST_RMOV=()				# list remove directory / file

# shellcheck disable=SC2317,SC2329
function funcTrap() {
	declare       _PATH=""
	declare -i    I=0
	for I in $(printf "%s\n" "${!_LIST_RMOV[@]}" | sort -Vr)
	do
		_PATH="${_LIST_RMOV[I]}"
		if [[ -e "${_PATH}" ]] && mountpoint --quiet "${_PATH}"; then
			printf "[%s]: umount \"%s\"\n" "${I}" "${_PATH}"
			umount --quiet         --recursive "${_PATH}" > /dev/null 2>&1 || \
			umount --quiet --force --recursive "${_PATH}" > /dev/null 2>&1 || \
			umount --quiet --lazy  --recursive "${_PATH}" || true
		fi
	done
}

trap funcTrap EXIT

if [ "${container:-}" != "mkosi" ] && command -v mkosi-chroot > /dev/null 2>&1; then
	mkosi-chroot "${CHROOT_SCRIPT:-}" "$@"
fi

# --- common external script execution ----------------------------------------
function fnExec_common_script() {
	declare       __PATH=""
	declare -a    __OPTN=()

	__PATH="./autoinst_cmd_late.sh"
	if [[ -e "${__PATH:-}" ]]; then
		printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: ${__PATH}"
		__OPTN=("ip=192.168.1.0::192.168.1.254:255.255.255.0:live-${DISTRIBUTION:-}.workgroup:-:192.168.1.254")
		if ! "${__PATH}" "${__OPTN[@]}"; then
			printf "\033[m${_PROG_NAME}: \033[91m%s\033[m\n" "        fail: ${__PATH}"
			/bin/bash
			exit 1
		fi
		printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "    complete: ${__PATH}"
	fi
}

# --- location settings -------------------------------------------------------
function fnConfig_location() {
	declare       __PATH=""
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: location"

	# --- LANG=ja=JP.UTF-8 ----------------------------------------------------
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: LANG"
	__PATH="/etc/locale.conf"
	cat <<- _EOT_ | sed -e '/^ [^ ]\+/ s/^ *//g' -e 's/^ \+$//g' > "${__PATH}"
		LANG=ja_JP.UTF-8
	_EOT_

	# --- keyboard ------------------------------------------------------------
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: keyboard"
	__PATH="/etc/vconsole.conf"
	cat <<- _EOT_ | sed -e '/^ [^ ]\+/ s/^ *//g' -e 's/^ \+$//g' > "${__PATH}"
		XKBMODEL="pc105"
		XKBLAYOUT="jp"
		XKBVARIANT=""
		XKBOPTIONS=""
		BACKSPACE="guess"
	_EOT_

	# --- timezone ------------------------------------------------------------
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: timezone"
	__PATH="/etc/localtime"
	rm -f "${__PATH:?}"
	ln -s /usr/share/zoneinfo/Asia/Tokyo "${__PATH}"

	# --- complete ------------------------------------------------------------
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "    complete: location"
}

# --- service settings --------------------------------------------------------
function fnConfig_service() {
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: service"
	systemctl -q is-enabled speech-dispatcher.service && systemctl disable speech-dispatcher.service || true
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "    complete: service"
}

# --- settings for each distribution ------------------------------------------
function fnConfig_ubuntu() {
	if systemctl --quiet is-system-running \
	&& systemctl --quiet is-active snapd.socket; then
		printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: snap"
		if ! snap install firefox thunderbird chromium; then
			printf "\033[m${_PROG_NAME}: \033[91m%s\033[m\n" "        fail: snap"
			return
		fi
		printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "    complete: snap"
	fi
}

function fnConfig_rhel_common() {
	declare       __PATH=""

	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: system-preset"
	__PATH="/etc/systemd/system-preset/00-user-custom.preset"
	mkdir -p "${__PATH%/*}"
	cat <<- _EOT_ | sed -e '/^ [^ ]\+/ s/^ *//g' -e 's/^ \+$//g' > "${__PATH}"
		enable sshd.service
		#enable sshd.socket
		enable systemd-resolved.service
		enable dnsmasq.service
		enable smb.service
		enable nmb.service
		enable httpd.service
		#enable httpd.socket
		enable firewalld.service
		enable upower.service
		enable dbus-broker.service
_EOT_

	# --- complete ------------------------------------------------------------
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "    complete: system-preset"
}

function fnConfig_live() {
	declare       __PATH=""

	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: live settings"
	# --- user.conf -----------------------------------------------------------
	__PATH="/etc/live/config.conf.d/user.conf"
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "      create: ${__PATH}"
	cat <<- _EOT_ | sed -e '/^ [^ ]\+/ s/^ *//g' -e 's/^ \+$//g' > "${__PATH}"
		export LIVE_HOSTNAME="live-${DISTRIBUTION:-}.workgroup"
		export LIVE_USERNAME="master"
		export LIVE_USER_PASSWORD="master"
		export LIVE_USER_FULLNAME="${DISTRIBUTION^} Live user"
		export LIVE_USER_DEFAULT_GROUPS="audio cdrom dip floppy video plugdev netdev powerdev scanner bluetooth debian-tor"

		for __PARAMETER in \${LIVE_CONFIG_CMDLINE:-}
		do
			case "\${__PARAMETER}" in
				live-config.user-password=*|user-password=*            ) LIVE_USER_PASSWORD="\${__PARAMETER#*user-password=}";;
				live-config.user-default-groups=*|user-default-groups=*) LIVE_USER_DEFAULT_GROUPS="\${__PARAMETER#*user-default-groups=}";;
				live-config.user-fullname=*|user-fullname=*            ) LIVE_USER_FULLNAME="\${__PARAMETER#*user-fullname=}";;
				live-config.username=*|username=*                      ) LIVE_USERNAME="\${__PARAMETER#*username=}";;
				*) ;;
			esac
		done
_EOT_

	# --- 0000-early-user-settings --------------------------------------------
	__PATH="/usr/lib/live/config/0000-early-user-settings"
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "      create: ${__PATH}"
	cat <<- _EOT_ | sed -e '/^ [^ ]\+/ s/^ *//g' -e 's/^ \+$//g' > "${__PATH}"
		#!/bin/sh

		 	[ -n "\${LIVE_BOOT_DEBUG:-}" ] && set -x

		Cmdline ()
		{
		 	for __PARAMETER in \${LIVE_CONFIG_CMDLINE:-}
		 	do
		 		case "\${__PARAMETER}" in
		 			live-config.user-password=*|user-password=*            ) LIVE_USER_PASSWORD="\${__PARAMETER#*user-password=}";;
		 			live-config.user-default-groups=*|user-default-groups=*) LIVE_USER_DEFAULT_GROUPS="\${__PARAMETER#*user-default-groups=}";;
		 			live-config.user-fullname=*|user-fullname=*            ) LIVE_USER_FULLNAME="\${__PARAMETER#*user-fullname=}";;
		 			live-config.username=*|username=*                      ) LIVE_USERNAME="\${__PARAMETER#*username=}";;
		 			*) ;;
		 		esac
		 	done
		}

		Init ()
		{
		 	printf "%s\n" " ${__PATH}"
		}

		Config ()
		{
		 	# Creating state file
		 	touch "/var/lib/live/config/${__PATH##*/}"
		}

		 	Cmdline
		 	Init
		 	Config

_EOT_
	chmod 755 "${__PATH}"

	# --- 9999-late-user-settings ---------------------------------------------
	__PATH="/usr/lib/live/config/9999-late-user-settings"
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "      create: ${__PATH}"
	cat <<- _EOT_ | sed -e '/^ [^ ]\+/ s/^ *//g' -e 's/^ \+$//g' > "${__PATH}"
		#!/bin/sh

		 	[ -n "\${LIVE_BOOT_DEBUG:-}" ] && set -x

		Cmdline ()
		{
		 	for __PARAMETER in \${LIVE_CONFIG_CMDLINE:-}
		 	do
		 		case "\${__PARAMETER}" in
		 			live-config.user-password=*|user-password=*            ) LIVE_USER_PASSWORD="\${__PARAMETER#*user-password=}";;
		 			live-config.user-default-groups=*|user-default-groups=*) LIVE_USER_DEFAULT_GROUPS="\${__PARAMETER#*user-default-groups=}";;
		 			live-config.user-fullname=*|user-fullname=*            ) LIVE_USER_FULLNAME="\${__PARAMETER#*user-fullname=}";;
		 			live-config.username=*|username=*                      ) LIVE_USERNAME="\${__PARAMETER#*username=}";;
		 			*) ;;
		 		esac
		 	done
		}

		Init ()
		{
		 	printf "%s\n" " ${__PATH}"
		}

		Config ()
		{
		 	# Setup user
		 	__PASSWORD="\$(echo "\${LIVE_USER_PASSWORD}" | mkpasswd -s)"
		 	if id "\${LIVE_USERNAME}" > /dev/null 2>&1; then
		 		usermod --password "\${__PASSWORD:?}" "\${LIVE_USERNAME}"
		 	else
		 		useradd --create-home --user-group --groups "\${LIVE_USER_DEFAULT_GROUPS}" --comment "\${LIVE_USER_FULLNAME}" --password "\${__PASSWORD:?}" "\${LIVE_USERNAME}"
		 	fi

		 	# Setup samba user
		 	printf "%s\n%s\n" "\${LIVE_USER_PASSWORD}" "\${LIVE_USER_PASSWORD}" | smbpasswd -a -s "\${LIVE_USERNAME}"

		 	# Creating state file
		 	touch "/var/lib/live/config/${__PATH##*/}"
		}

		 	Cmdline
		 	Init
		 	Config

_EOT_
	chmod 755 "${__PATH}"

	# --- complete ------------------------------------------------------------
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "    complete: live settings"
}

# === main ====================================================================
function fnMain() {
	declare       __PATH=""

	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "   execution: main"

	# --- mount bind ----------------------------------------------------------
	__PATH="./run/."
	if [[ -e "${__PATH:-}" ]]; then
		printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "  mount bind: ${__PATH}"
		mount  --bind "${__PATH}" /run/ && _LIST_RMOV+=("/run/")
	fi

	# --- common settings -----------------------------------------------------
	fnExec_common_script				# common external script execution
	fnConfig_location					# location settings
	fnConfig_service					# service settings

	# ----allocation of each distribution -------------------------------------
	case "${DISTRIBUTION:-}" in
		debian      ) fnConfig_live;;
		ubuntu      ) fnConfig_live; fnConfig_ubuntu;;
		fedora      | \
		centos      | \
		alma        | \
		rocky       | \
		miracle     ) fnConfig_rhel_common;;
		opensuse    ) ;;
#		kali        ) ;;
#		arch        ) ;;
#		mageia      ) ;;
#		rhel-ubi    ) ;;
#		rhel        ) ;;
#		openmandriva) ;;
#		azure       ) ;;
#		custom      ) ;;
		*           ) echo "not found: ${DISTRIBUTION:-}"; exit 1;;
	esac

	# --- unmount bind --------------------------------------------------------
	__PATH="./run/."
	if [[ -e "${__PATH:-}" ]]; then
		printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "unmount bind: ${__PATH}"
		umount /run/
	fi

	# --- complete ------------------------------------------------------------
	printf "\033[m${_PROG_NAME}: \033[94m%s\033[m\n" "    complete: main"
}

fnMain									# main

#rm -rf /.autorelabel /.cache /work

printf "\033[m${_PROG_NAME}: \033[92m%s\033[m\n" "--- complete: [${_FUNC_NAME}] ---"

exit 0

# === memo ====================================================================

# text color: \033[xxm
#	|   color    | bright | reverse|  dark  |
#	| black      |   90   |   40   |   30   |
#	| red        |   91   |   41   |   31   |
#	| green      |   92   |   42   |   32   |
#	| yellow     |   93   |   43   |   33   |
#	| blue       |   94   |   44   |   34   |
#	| purple     |   95   |   45   |   35   |
#	| light blue |   96   |   46   |   36   |
#	| white      |   97   |   47   |   37   |
# text attribute
#	| reset            | \033[m   | reset all attributes  |
#	| bold             | \033[1m  |                       |
#	| faint            | \033[2m  |                       |
#	| italic           | \033[3m  |                       |
#	| underline        | \033[4m  | set underline         |
#	| blink            | \033[5m  |                       |
#	| fast blink       | \033[6m  |                       |
#	| reverse          | \033[7m  | set reverse display   |
#	| conceal          | \033[8m  |                       |
#	| strike           | \033[9m  |                       |
#	| gothic           | \033[20m |                       |
#	| double underline | \033[21m |                       |
#	| normal           | \033[22m |                       |
#	| no italic        | \033[23m | reset underline       |
#	| no underline     | \033[24m |                       |
#	| no blink         | \033[25m |                       |
#	| no reverse       | \033[27m | reset reverse display |
# source: https://qiita.com/ko1nksm/items/095bdb8f0eca6d327233

### eof #######################################################################
