#_preseed_V1
# ### Contents of the preconfiguration file (for ubuntu) ######################
# *** Unattended Installation *************************************************
  d-i debconf/priority select high
# -- anna ---------------------------------------------------------------------
  d-i anna/choose_modules multiselect netcfg
# == Ubiquity =================================================================
# ubiquity ubiquity/hide_slideshow boolean true
# ubiquity ubiquity/download_updates boolean true
# ubiquity ubiquity/use_nonfree boolean false
# ubiquity ubiquity/install_oem boolean true
# ubiquity ubiquity/reboot boolean true
# ubiquity ubiquity/success_command string \
#     in-target --pass-stdout systemctl disable connman.service;
# *** Localization ************************************************************
# d-i debian-installer/language string ja
# d-i debian-installer/country string JP
# d-i debian-installer/locale string ja_JP.UTF-8
# d-i localechooser/supported-locales multiselect en_US.UTF-8, ja_JP.UTF-8
  d-i localechooser/translation/warn-light boolean true
# === Keyboard selection ======================================================
# d-i keyboard-configuration/xkb-keymap select jp
# d-i keyboard-configuration/toggle select No toggling
# *** Network configuration ***************************************************
# d-i netcfg/enable boolean true
# d-i netcfg/choose_interface select auto
# d-i netcfg/choose_interface select eth1
# d-i netcfg/link_wait_timeout string 10
# d-i netcfg/dhcp_timeout string 60
# d-i netcfg/dhcpv6_timeout string 60
# d-i netcfg/disable_autoconfig boolean true
# d-i netcfg/dhcp_failed note
# d-i netcfg/dhcp_options select Configure network manually
# === Static network configuration ============================================
# --- IPv4 example ------------------------------------------------------------
# d-i netcfg/get_ipaddress string 192.168.1.1
# d-i netcfg/get_netmask string 255.255.255.0
# d-i netcfg/get_gateway string 192.168.1.254
# d-i netcfg/get_nameservers string 192.168.1.254
# d-i netcfg/confirm_static boolean true
# d-i netcfg/confirm_static boolean true
# --- IPv6 example ------------------------------------------------------------
# d-i netcfg/get_ipaddress string fc00::2
# d-i netcfg/get_netmask string ffff:ffff:ffff:ffff::
# d-i netcfg/get_gateway string fc00::1
# d-i netcfg/get_nameservers string fc00::1
# d-i netcfg/confirm_static boolean true
# d-i netcfg/confirm_static boolean true
# === hostname and domain names ===============================================
# d-i netcfg/get_hostname string sv-ubuntu
# d-i netcfg/get_domain string workgroup
# d-i netcfg/hostname string somehost
# === Disable that annoying WEP key dialog ====================================
# d-i netcfg/wireless_wep string
# === The wacky dhcp hostname that some ISPs use as a password of sorts =======
# d-i netcfg/dhcp_hostname string radish
# === If you want to completely disable firmware lookup =======================
# d-i hw-detect/firmware-lookup string never
# === If non-free firmware is needed for the network or other hardware ========
# d-i hw-detect/load_firmware boolean true
# *** Network console *********************************************************
# d-i anna/choose_modules string network-console
# d-i network-console/authorized_keys_url string http://10.0.0.1/openssh-key
# d-i network-console/password password r00tme
# d-i network-console/password-again password r00tme
# *** Mirror settings *********************************************************
# === Mirror protocol: ========================================================
# d-i mirror/protocol string ftp
  d-i mirror/protocol string http
# d-i mirror/protocol string https
  d-i mirror/country string JP
  d-i mirror/http/hostname string archive.ubuntu.com
  d-i mirror/http/directory string /ubuntu
  d-i mirror/http/proxy string
  d-i mirror/http/mirror select archive.ubuntu.com
# === Suite to install ========================================================
# d-i mirror/suite string stable
# d-i mirror/suite string testing
# d-i mirror/udeb/suite string testing
# *** Account setup ***********************************************************
  d-i passwd/root-login boolean false
# d-i passwd/make-user boolean true
# === Root password, either in clear text =====================================
# d-i passwd/root-password password r00tme
# d-i passwd/root-password-again password r00tme
# d-i passwd/root-password-crypted password [crypt(3) hash]
# === To create a normal user account =========================================
  d-i passwd/user-fullname string Master
  d-i passwd/username string master
  d-i passwd/user-password password master
  d-i passwd/user-password-again password master
# d-i passwd/user-password-crypted password [crypt(3) hash]
# d-i passwd/user-uid string 1010
# d-i passwd/user-default-groups string audio cdrom video
# -----------------------------------------------------------------------------
  d-i user-setup/allow-password-weak string true
# *** Clock and time zone setup ***********************************************
# d-i clock-setup/utc boolean true
  d-i time/zone string Asia/Tokyo
# d-i clock-setup/ntp boolean true
  d-i clock-setup/ntp-server string ntp.nict.jp
# *** Partitioning ************************************************************
# === Partitioning example ====================================================
# d-i partman-auto/init_automatically_partition select biggest_free
  d-i partman-auto/init_automatically_partition select lvm
  d-i partman-auto/disk string /dev/nvme0n1
# d-i partman-auto/disk string /dev/nvme0n1 /dev/sda
# d-i partman-auto/disk string /dev/sda
# d-i partman-auto/method string regular
  d-i partman-auto/method string lvm
# d-i partman-auto/method string crypto
# d-i partman-auto/method string raid
  d-i partman-auto-lvm/guided_size string max
# -----------------------------------------------------------------------------
# d-i partman/unmount_active boolean true
  d-i partman-auto/purge_lvm_from_device boolean true
  d-i partman-crypto/confirm_nooverwrite boolean false
# d-i partman-basicfilesystems/no_swap boolean false
# d-i partman-md/confirm boolean true
# d-i partman-md/confirm_nooverwrite boolean false
# -----------------------------------------------------------------------------
  d-i partman-lvm/device_remove_lvm boolean true
  d-i partman-md/device_remove_md boolean true
  d-i partman-lvm/confirm boolean true
  d-i partman-lvm/confirm_nooverwrite boolean true
# -----------------------------------------------------------------------------
  d-i partman-auto/choose_recipe select atomic
# d-i partman-auto/choose_recipe select home
# d-i partman-auto/choose_recipe select multi
# d-i partman-auto/expert_recipe_file string /hd-media/recipe
# -----------------------------------------------------------------------------
# /dev/nvme0n1p1: 512MB: efi
#      nvme0n1p2: 512MB: /boot
#      nvme0n1p3:    -1: vg00
# /dev/sda1     :    -1: vg01
# vg00-root     :    -1: /
# vg01-home     :    -1: /home
#
# d-i partman-auto/expert_recipe string             \
#   boot-lvm ::                                     \
#       512   512   512 free                        \
#         $iflabel{ gpt } $reusemethod{ }           \
#         method{ efi } format{ }                   \
#         device{ /dev/nvme0n1p1 }                  \
#     .                                             \
#       512   512   512 ext3                        \
#         $primary{ } $bootable{ }                  \
#         method{ format } format{ }                \
#         use_filesystem{ } filesystem{ ext3 }      \
#         mountpoint{ /boot }                       \
#         device{ /dev/nvme0n1p2 }                  \
#     .                                             \
#      1024  1024    -1 ext4                        \
#         $primary{ }                               \
#         method{ lvm } vg_name{ vg00 }             \
#         device{ /dev/nvme0n1p3 }                  \
#     .                                             \
#      1024  1024    -1 ext4                        \
#         $primary{ }                               \
#         method{ lvm } vg_name{ vg01 }             \
#         device{ /dev/sda1 }                       \
#     .                                             \
#      1024  1024    -1 ext4                        \
#         $lvmok{ } in_vg{ vg00 } lv_name{ root }   \
#         method{ format } format{ }                \
#         use_filesystem{ } filesystem{ ext4 }      \
#         mountpoint{ / }                           \
#     .                                             \
#      1024  1024    -1 ext4                        \
#         $lvmok{ } in_vg{ vg01 } lv_name{ home }   \
#         method{ format } format{ }                \
#         use_filesystem{ } filesystem{ ext4 }      \
#         mountpoint{ /home }                       \
#     .
# --- This makes partman automatically partition without confirmation ---------
  d-i partman-partitioning/confirm_write_new_label boolean true
  d-i partman/choose_partition select finish
  d-i partman/confirm boolean true
  d-i partman/confirm_nooverwrite boolean true
# --- Force UEFI booting ('BIOS compatibility' will be lost). Default: false --
  d-i partman-efi/non_efi_system boolean true
# --- Ensure the partition table is GPT - this is required for EFI ------------
# d-i partman-partitioning/choose_label select gpt
# d-i partman-partitioning/default_label string gpt
# --- When disk encryption is enabled, skip wiping the partitions beforehand --
  d-i partman-auto-crypto/erase_disks boolean true
# === Controlling how partitions are mounted ==================================
# d-i partman/mount_style select uuid
# *** Base system installation ************************************************
# d-i base-installer/install-recommends boolean true
# d-i base-installer/kernel/image string linux-image-686
# *** Apt setup ***************************************************************
  d-i apt-setup/cdrom/set-first boolean false
  d-i apt-setup/multiverse boolean true
  d-i apt-setup/restricted boolean true
  d-i apt-setup/universe boolean true
# d-i apt-setup/backports boolean true
# d-i apt-setup/proposed boolean true
# d-i apt-setup/partner boolean true
# d-i apt-setup/disable-cdrom-entries boolean false
  d-i apt-setup/use_mirror boolean true
  d-i apt-setup/services-select multiselect security, updates
  d-i apt-setup/security_host string security.ubuntu.com
# d-i apt-setup/local0/repository string http://local.server/debian stable main
# d-i apt-setup/local0/comment string local server
# d-i apt-setup/local0/source boolean true
# d-i apt-setup/local0/key string http://local.server/key
# d-i apt-setup/local0/key string base64://LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCi4uLgo=
# d-i debian-installer/allow_unauthenticated boolean false
# --- Uncomment this to add multiarch configuration for i386 ------------------
# d-i apt-setup/multiarch string i386
# *** Advanced options ********************************************************
# === Running custom commands during the installation =========================
# d-i preseed/run string \
#     https://raw.githubusercontent.com/office-itou/Linux/refs/heads/master/shell-script/conf/script/autoinst_cmd_run.sh
# -----------------------------------------------------------------------------
  d-i preseed/early_command string \
      set -eu; \
      exec 2>&1; \
      export LANG=C; \
      _PROG_PATH="${0:-}"; \
      _PROG_NAME="${_PROG_PATH##*/}"; \
      _FUNC_NAME="early_command"; \
      _COMD_LINE="$(cat /proc/cmdline)"; \
      for _LINE in ${_COMD_LINE}; \
      do \
        case "${_LINE}" in \
          debug              ) _FLAG_DBGS="true"; set -x;; \
          debugout|dbg|dbgout) _FLAG_DBGS="true";; \
          *) ;; \
        esac; \
      done; \
      _DIRS_TGET="/target"; \
      if [ -n "${_DIRS_TGET}" ] && [ ! -d "${_DIRS_TGET}/root/." ]; then \
        _DIRS_TGET=""; \
      fi; \
      _DIRS_INST="/var/adm/autoinst"; \
      _PATH_LOGS="${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log"; \
      mkdir -p "${_DIRS_TGET}${_DIRS_INST}"; \
      chmod 0600 "${_DIRS_TGET}${_DIRS_INST}"; \
      { \
        printf "\033[m\033[42m%s\033[m\n" "Running ${_PROG_NAME}"; \
        _time_start=$(date +%s); \
        printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"; \
        _PATH_SEED=""; \
        _PATH="/var/lib/cdebconf/questions.dat"; \
        if [ -f "${_PATH}" ]; then \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "find ${_PATH##*/}"; \
          _PATH_SEED="$(sed -ne '\%^Name:[ \t]\+preseed/\(url\|file\)$%,\%^$%{\%^Value:[ \t]\+% s%^.*[ \t]\+%%p}' "${_PATH}")"; \
          cp -a "${_PATH}" "${_DIRS_TGET}${_DIRS_INST}/"; \
        fi; \
        _PATH="/var/lib/cloud/data/result.json"; \
        if [ -f "${_PATH}" ]; then \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "find ${_PATH##*/}"; \
          _PATH_DEVS="$(awk '/DataSourceNoCloud/ {sub(/.*\//,""); sub(/[^[:alnum:]].*/,""); print $0;}' "${_PATH}")"; \
          _PATH_SEED="/user-data"; \
        fi; \
        if [ -n "${AutoYaST:-}" ]; then \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "find AutoYaST=${AutoYaST}"; \
          _PATH_DEVS="${Device:-}"; \
          _PATH_SEED="${AutoYaST#*"${_PATH_DEVS}"}"; \
        fi; \
        _DIRS_COMD="${_PATH_SEED%/*}"; \
        _DIRS_COMD="${_DIRS_COMD%/*}/script"; \
        for _LINE in ${_COMD_LINE}; \
        do \
          case "${_LINE}" in \
            debug|debugout|dbg|dbgout ) _FLAG_DBGS="true";; \
            iso-url=*.iso |url=*.iso  ) ;; \
            preseed/url=* |url=*      ) _PATH_SEED="${_LINE#*url=}"; \
                                        _DIRS_COMD="${_PATH_SEED%/*}"; \
                                        _DIRS_COMD="${_DIRS_COMD%/*}/script";; \
            preseed/file=*|file=*     ) _PATH_SEED="${_LINE#*file=}"; \
                                        _DIRS_COMD="${_PATH_SEED%/*}"; \
                                        _DIRS_COMD="${_DIRS_COMD%/*}/script";; \
            ds=nocloud*               ) _PATH_SEED="${_LINE#*ds=nocloud*=}"; \
                                        _PATH_SEED="${_PATH_SEED%/}/user-data"; \
                                        _DIRS_COMD="${_PATH_SEED%/}"; \
                                        _DIRS_COMD="${_DIRS_COMD%/nocloud*}/script";; \
            inst.ks=*                 ) _PATH_SEED="${_LINE#*inst.ks=}"; \
                                        case "${_PATH_SEED}" in \
                                          http:*|https:*|ftp:*|tftp:*) \
                                            _DIRS_COMD="${_PATH_SEED%/*}"; \
                                            _DIRS_COMD="${_DIRS_COMD%/*}/script";; \
                                          hd:sr0:*|cdrom|cdrom:*) \
                                            _PATH_SEED="/target/install/repo/${_PATH_SEED#*:*/}"; \
                                            _DIRS_COMD="${_PATH_SEED%/*}"; \
                                            _DIRS_COMD="${_DIRS_COMD%/*}/script";; \
                                          nfs:*                 ) ;; \
                                          hd:*                  ) ;; \
                                          hmc                   ) ;; \
                                          *) ;; \
                                        esac;; \
            autoyast=*                ) if [ -z "${AutoYaST:-}" ]; then \
                                          _PATH_SEED="${_LINE#*autoyast=}"; \
                                          _DIRS_COMD="${_PATH_SEED%/*}"; \
                                          _DIRS_COMD="${_DIRS_COMD%/*}/script"; \
                                        fi;; \
            *) ;; \
          esac; \
        done; \
        if [ -n "${_FLAG_DBGS:-}" ]; then \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "debug print"; \
          printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "LANG      " "${LANG:-}"; \
          printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_FUNC_NAME" "${_FUNC_NAME:-}"; \
          printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_DIRS_TGET" "${_DIRS_TGET:-}"; \
          printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_DIRS_INST" "${_DIRS_INST:-}"; \
          printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_PATH_LOGS" "${_PATH_LOGS:-}"; \
          printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_PATH_SEED" "${_PATH_SEED:-}"; \
          printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_DIRS_COMD" "${_DIRS_COMD:-}"; \
        fi; \
        { \
          echo "nameserver 8.8.8.8"; \
          echo "nameserver 8.8.4.4"; \
        } >>  /etc/resolv.conf; \
        _PATH="/run/systemd/resolve/stub-resolv.conf"; \
        if [ ! -e "${_PATH}" ]; then \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "copy ${_PATH##/*}"; \
          mkdir -p /run/systemd/resolve; \
          cp -p /etc/resolv.conf "${_PATH}"; \
        fi; \
        if [ -n "${_PATH_SEED:-}" ]; then \
          if [ -n "${_PATH_DEVS:-}" ]; then \
            _PATH_DEVS="/dev/${_PATH_DEVS}"; \
            if [ -e "${_PATH_DEVS}" ]; then \
              printf "### %s: %s ###\n" "${_FUNC_NAME}" "mount: [${_PATH_DEVS}]"; \
              _MNTP="/tmp/autoinst-mnt"; \
              mkdir -p "${_MNTP}"; \
              mount -r "${_PATH_DEVS}" "${_MNTP}"; \
              _PATH_SEED="${_MNTP}${_PATH_SEED}"; \
              _DIRS_COMD="${_MNTP}${_DIRS_COMD}"; \
            fi; \
          fi; \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "file copy"; \
          for _PATH in "${_PATH_SEED}"                       \
                       "${_DIRS_COMD}/autoinst_cmd_early.sh" \
                       "${_DIRS_COMD}/autoinst_cmd_late.sh"  \
                       "${_DIRS_COMD}/autoinst_cmd_part.sh"  \
                       "${_DIRS_COMD}/autoinst_cmd_run.sh";  \
          do \
            printf "### %s: %s ###\n" "${_FUNC_NAME}" "copy: [${_PATH}]"; \
            case "${_PATH}" in \
              http:*|https:*|ftp:*|tftp:*) \
                if command -v wget > /dev/null 2>&1; then \
                  wget --tries=3 --timeout=10 --quiet --continue --show-progress --progress=bar --output-document "${_DIRS_TGET:-}${_DIRS_INST}/${_PATH##*/}" "${_PATH}" || true; \
                else \
                  curl --location --http1.1 --no-progress-bar --remote-time --show-error --fail --retry-max-time 3 --retry 3 --connect-timeout 60 --progress-bar --continue-at - --create-dirs --output-dir "${_DIRS_TGET}${_DIRS_INST}" --output "${_PATH##*/}" "${_PATH}" || true; \
                fi;; \
              file:*|/*                  ) cp -a "${_PATH#*:*//}" "${_DIRS_TGET}${_DIRS_INST}/" || true;; \
              *) ;; \
            esac; \
            if [ "${_PATH}" != "${_PATH_SEED}" ] && [ -e "${_DIRS_TGET}${_DIRS_INST}/${_PATH##*/}" ]; then \
              chmod 0700 "${_DIRS_TGET}${_DIRS_INST}/${_PATH##*/}"; \
            fi; \
          done; \
          if [ -n "${_MNTP:-}" ]; then \
            printf "### %s: %s ###\n" "${_FUNC_NAME}" "umount: [${_PATH_DEVS}]"; \
            umount "${_MNTP}"; \
          fi; \
        fi; \
        _time_end=$(date +%s); \
        _time_elapsed=$((_time_end-_time_start)); \
        printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"; \
        printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60)); \
        printf "\033[m\033[42m%s\033[m\n" "Complete ${_PROG_NAME}"; \
      } >> "${_PATH_LOGS}" 2>&1; \
      exit 0;
# -----------------------------------------------------------------------------
  d-i partman/early_command string \
      set -eu; \
      exec 2>&1; \
      export LANG=C; \
      _PROG_PATH="${0:-}"; \
      _PROG_NAME="${_PROG_PATH##*/}"; \
      _FUNC_NAME="partman_early_command"; \
      _COMD_LINE="$(cat /proc/cmdline)"; \
      for _LINE in ${_COMD_LINE}; \
      do \
        case "${_LINE}" in \
          debug              ) _FLAG_DBGS="true"; set -x;; \
          debugout|dbg|dbgout) _FLAG_DBGS="true";; \
          *) ;; \
        esac; \
      done; \
      _DIRS_TGET="/target"; \
      if [ -n "${_DIRS_TGET}" ] && [ ! -d "${_DIRS_TGET}/root/." ]; then \
        _DIRS_TGET=""; \
      fi; \
      _DIRS_INST="/var/adm/autoinst"; \
      _PATH_LOGS="${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log"; \
      mkdir -p "${_DIRS_TGET}${_DIRS_INST}"; \
      chmod 0600 "${_DIRS_TGET}${_DIRS_INST}"; \
      { \
        printf "\033[m\033[42m%s\033[m\n" "Running ${_PROG_NAME}"; \
        _time_start=$(date +%s); \
        printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"; \
        _PATH_EXEC="${_DIRS_TGET}${_DIRS_INST}/autoinst_cmd_part.sh"; \
        if [ -e "${_PATH_EXEC}" ]; then \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "exec: ${_PATH_EXEC}"; \
          sh -c "${_PATH_EXEC} nvme0n1"; \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "complete: ${_PATH_EXEC}"; \
        fi; \
        _time_end=$(date +%s); \
        _time_elapsed=$((_time_end-_time_start)); \
        printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"; \
        printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60)); \
        printf "\033[m\033[42m%s\033[m\n" "Complete ${_PROG_NAME}"; \
      } >> "${_PATH_LOGS}" 2>&1; \
      exit 0;
# -----------------------------------------------------------------------------
  d-i preseed/late_command string \
      set -eu; \
      exec 2>&1; \
      export LANG=C; \
      _PROG_PATH="${0:-}"; \
      _PROG_NAME="${_PROG_PATH##*/}"; \
      _FUNC_NAME="late_command"; \
      _COMD_LINE="$(cat /proc/cmdline)"; \
      for _LINE in ${_COMD_LINE}; \
      do \
        case "${_LINE}" in \
          debug              ) _FLAG_DBGS="true"; set -x;; \
          debugout|dbg|dbgout) _FLAG_DBGS="true";; \
          *) ;; \
        esac; \
      done; \
      _DIRS_TGET="/target"; \
      if [ -n "${_DIRS_TGET}" ] && [ ! -d "${_DIRS_TGET}/root/." ]; then \
        _DIRS_TGET=""; \
      fi; \
      _DIRS_INST="/var/adm/autoinst"; \
      _PATH_LOGS="${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log"; \
      mkdir -p "${_DIRS_TGET}${_DIRS_INST}"; \
      chmod 0600 "${_DIRS_TGET}${_DIRS_INST}"; \
      { \
        printf "\033[m\033[42m%s\033[m\n" "Running ${_PROG_NAME}"; \
        _time_start=$(date +%s); \
        printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"; \
        if [ -n "${_DIRS_TGET}" ] && [ -n "${_DIRS_INST}" ] && [ -d "${_DIRS_INST}"/. ]; then \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "file copy"; \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "copy: ${_DIRS_INST}"; \
          mkdir -p "${_DIRS_TGET}${_DIRS_INST}"; \
          cp -a "${_DIRS_INST}"/. "${_DIRS_TGET}${_DIRS_INST}"; \
        fi; \
        _PATH_EXEC="${_DIRS_INST}/autoinst_cmd_late.sh"; \
        if [ -e "${_DIRS_TGET}${_PATH_EXEC}" ]; then \
          printf "### %s: %s ###\n" "${_FUNC_NAME}" "exec: ${_PATH_EXEC}"; \
          if [ -z "${_DIRS_TGET}" ]; then \
            if sh -c "${_PATH_EXEC}"; then \
              printf "### %s: %s ###\n" "${_FUNC_NAME}" "complete: ${_PATH_EXEC}"; \
            else \
              printf "### %s: %s ###\n" "${_FUNC_NAME}" "failed: ${_PATH_EXEC}"; \
            fi; \
          else \
            :; \
            if [ -n "${SUBIQUITY_ROOT:-}" ]; then \
              printf "### %s: %s ###\n" "${_FUNC_NAME}" "exec: curtin: ${_PATH_EXEC}"; \
              if curtin in-target --target="${_DIRS_TGET}" -- sh -c "${_PATH_EXEC}"; then \
                printf "### %s: %s ###\n" "${_FUNC_NAME}" "complete: ${_PATH_EXEC}"; \
              else \
                printf "### %s: %s ###\n" "${_FUNC_NAME}" "failed: ${_PATH_EXEC}"; \
              fi; \
            else \
              printf "### %s: %s ###\n" "${_FUNC_NAME}" "exec: in-target: ${_PATH_EXEC}"; \
              if in-target --pass-stdout sh -c "${_PATH_EXEC}"; then \
                printf "### %s: %s ###\n" "${_FUNC_NAME}" "complete: ${_PATH_EXEC}"; \
              else \
                printf "### %s: %s ###\n" "${_FUNC_NAME}" "failed: ${_PATH_EXEC}"; \
              fi; \
            fi; \
          fi; \
        fi; \
        _time_end=$(date +%s); \
        _time_elapsed=$((_time_end-_time_start)); \
        printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"; \
        printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60)); \
        printf "\033[m\033[42m%s\033[m\n" "Complete ${_PROG_NAME}"; \
      } >> "${_PATH_LOGS}" 2>&1; \
      exit 0;
# == End Of File ==============================================================
