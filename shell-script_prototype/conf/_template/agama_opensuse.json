{
  "bootloader": {
    "extraKernelParams": ""
  },
  "localization": {
    "languages": [
      "ja_JP.UTF-8"
    ],
    "keyboard": "jp",
    "timezone": "Asia/Tokyo"
  },
  "hostname": {
    "static": "sv-opensuse.workgroup"
  },
  "network": {
    "connections": [
      {
        "id": "Wired connection 1",
        "interface": "ens160",
        "method4": "manual",
        "gateway4": "192.168.1.254",
        "addresses": ["192.168.1.1/24"],
        "nameservers": ["192.168.1.254"]
      }
    ]
  },
  "product": {
    "id": "Leap"
  },
  "root": {
    "password": "r00t"
  },
  "user": {
    "userName": "master",
    "fullName": "Master",
    "password": "master"
  },
  "scripts": {
    "postPartitioning": [
      {
        "name": "zzz_postpartitioning-scripts.sh",
        "content": "#!/bin/sh\n  set -eu\n  exec 2>&1\n  export LANG=C\n  _PROG_PATH=\"${0:-}\"\n  _PROG_NAME=\"${_PROG_PATH##*/}\"\n  _FUNC_NAME=\"${_PROG_NAME:-postpartitioning-scripts}\"\n  _COMD_LINE=\"$(cat /proc/cmdline)\"\n  for _LINE in ${_COMD_LINE}\n  do\n    case \"${_LINE}\" in\n      debug              ) _FLAG_DBGS=\"true\"; set -x;;\n      debugout|dbg|dbgout) _FLAG_DBGS=\"true\";;\n      *) ;;\n    esac\n  done\n  _DIRS_TGET=\"/mnt\"\n  if [ -n \"${_DIRS_TGET}\" ] && [ ! -d \"${_DIRS_TGET}/root/.\" ]; then\n    _DIRS_TGET=\"\"\n  fi\n  _DIRS_INST=\"/var/adm/autoinst\"\n  _PATH_LOGS=\"${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log\"\n  mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n  chmod 0600 \"${_DIRS_TGET}${_DIRS_INST}\"\n  {\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Running ${_PROG_NAME}\"\n    _time_start=$(date +%s)\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_start}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing start\"\n    _time_end=$(date +%s)\n    _time_elapsed=$((_time_end-_time_start))\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_end}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing end\"\n    printf \"elapsed time: %dd%02dh%02dm%02ds\\n\" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Complete ${_PROG_NAME}\"\n  } >> \"${_PATH_LOGS}\" 2>&1\n  exit 0"
      }
    ],
    "post": [
      {
        "name": "zzz_chroot-scripts.sh",
        "content": "#!/bin/sh\n  set -eu\n  exec 2>&1\n  export LANG=C\n  _PROG_PATH=\"${0:-}\"\n  _PROG_NAME=\"${_PROG_PATH##*/}\"\n  _FUNC_NAME=\"${_PROG_NAME:-chroot-scripts}\"\n  _COMD_LINE=\"$(cat /proc/cmdline)\"\n  for _LINE in ${_COMD_LINE}\n  do\n    case \"${_LINE}\" in\n      debug              ) _FLAG_DBGS=\"true\"; set -x;;\n      debugout|dbg|dbgout) _FLAG_DBGS=\"true\";;\n      *) ;;\n    esac\n  done\n  _DIRS_TGET=\"/mnt\"\n  if [ -n \"${_DIRS_TGET}\" ] && [ ! -d \"${_DIRS_TGET}/root/.\" ]; then\n    _DIRS_TGET=\"\"\n  fi\n  _DIRS_INST=\"/var/adm/autoinst\"\n  _PATH_LOGS=\"${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log\"\n  mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n  chmod 0600 \"${_DIRS_TGET}${_DIRS_INST}\"\n  {\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Running ${_PROG_NAME}\"\n    _time_start=$(date +%s)\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_start}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing start\"\n    if [ -n \"${_DIRS_TGET}\" ] && [ -n \"${_DIRS_INST}\" ] && [ -d \"${_DIRS_INST}\"/. ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"file copy\"\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"copy: ${_DIRS_INST}\"\n      mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n      cp -a \"${_DIRS_INST}\"/. \"${_DIRS_TGET}${_DIRS_INST}\"\n    fi\n    _PATH_EXEC=\"${_DIRS_INST}/autoinst_cmd_late.sh\"\n    if [ -e \"${_DIRS_TGET}${_PATH_EXEC}\" ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"exec: ${_PATH_EXEC}\"\n      if [ -z \"${_DIRS_TGET}\" ]; then\n        if sh -c \"${_PATH_EXEC}\"; then\n          printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"complete: ${_PATH_EXEC}\"\n        else\n          printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"failed: ${_PATH_EXEC}\"\n        fi\n      else\n        mount --rbind /dev  \"${_DIRS_TGET}\"/dev\n        mount --rbind /proc \"${_DIRS_TGET}\"/proc\n        mount --rbind /run  \"${_DIRS_TGET}\"/run\n        mount --rbind /sys  \"${_DIRS_TGET}\"/sys\n        mount --rbind /tmp  \"${_DIRS_TGET}\"/tmp\n        mount --make-rslave \"${_DIRS_TGET}\"/dev\n        mount --make-rslave \"${_DIRS_TGET}\"/sys\n        systemctl daemon-reload || true\n        if chroot \"${_DIRS_TGET}\"/ sh -c \"${_PATH_EXEC}\"; then\n          printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"complete: ${_PATH_EXEC}\"\n        else\n          printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"failed: ${_PATH_EXEC}\"\n        fi\n#       umount -R \"${_DIRS_TGET}\" || true\n      fi\n    fi\n    _time_end=$(date +%s)\n    _time_elapsed=$((_time_end-_time_start))\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_end}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing end\"\n    printf \"elapsed time: %dd%02dh%02dm%02ds\\n\" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Complete ${_PROG_NAME}\"\n  } >> \"${_PATH_LOGS}\" 2>&1\n  exit 0",
        "chroot": false
      },
      {
        "name": "agama-services-manager",
        "chroot": true,
        "content": "#!/bin/bash\nsystemctl set-default graphical.target\nsystemctl disable wicked\nsystemctl enable firewalld\nsystemctl enable systemd-resolved\nsystemctl enable systemd-timesyncd\nsystemctl enable NetworkManager\nsystemctl enable dnsmasq\nsystemctl enable sshd\nsystemctl enable apache2\nsystemctl enable smb\nsystemctl enable nmb\nsystemctl enable winbind\n"
      }
    ],
    "init": [
      {
        "name": "zzz_post-scripts.sh",
        "content": "#!/bin/sh\n  set -eu\n  exec 2>&1\n  export LANG=C\n  _PROG_PATH=\"${0:-}\"\n  _PROG_NAME=\"${_PROG_PATH##*/}\"\n  _FUNC_NAME=\"${_PROG_NAME:-post-scripts}\"\n  _COMD_LINE=\"$(cat /proc/cmdline)\"\n  for _LINE in ${_COMD_LINE}\n  do\n    case \"${_LINE}\" in\n      debug              ) _FLAG_DBGS=\"true\"; set -x;;\n      debugout|dbg|dbgout) _FLAG_DBGS=\"true\";;\n      *) ;;\n    esac\n  done\n  _DIRS_TGET=\"/mnt\"\n  if [ -n \"${_DIRS_TGET}\" ] && [ ! -d \"${_DIRS_TGET}/root/.\" ]; then\n    _DIRS_TGET=\"\"\n  fi\n  _DIRS_INST=\"/var/adm/autoinst\"\n  _PATH_LOGS=\"${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log\"\n  mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n  chmod 0600 \"${_DIRS_TGET}${_DIRS_INST}\"\n  {\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Running ${_PROG_NAME}\"\n    _time_start=$(date +%s)\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_start}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing start\"\n    _time_end=$(date +%s)\n    _time_elapsed=$((_time_end-_time_start))\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_end}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing end\"\n    printf \"elapsed time: %dd%02dh%02dm%02ds\\n\" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Complete ${_PROG_NAME}\"\n  } >> \"${_PATH_LOGS}\" 2>&1\n  exit 0"
      },
      {
        "name": "zzz_init-scripts.sh",
        "content": "#!/bin/sh\n  set -eu\n  exec 2>&1\n  export LANG=C\n  _PROG_PATH=\"${0:-}\"\n  _PROG_NAME=\"${_PROG_PATH##*/}\"\n  _FUNC_NAME=\"${_PROG_NAME:-init-scripts}\"\n  _COMD_LINE=\"$(cat /proc/cmdline)\"\n  for _LINE in ${_COMD_LINE}\n  do\n    case \"${_LINE}\" in\n      debug              ) _FLAG_DBGS=\"true\"; set -x;;\n      debugout|dbg|dbgout) _FLAG_DBGS=\"true\";;\n      *) ;;\n    esac\n  done\n  _DIRS_TGET=\"/mnt\"\n  if [ -n \"${_DIRS_TGET}\" ] && [ ! -d \"${_DIRS_TGET}/root/.\" ]; then\n    _DIRS_TGET=\"\"\n  fi\n  _DIRS_INST=\"/var/adm/autoinst\"\n  _PATH_LOGS=\"${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log\"\n  mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n  chmod 0600 \"${_DIRS_TGET}${_DIRS_INST}\"\n  {\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Running ${_PROG_NAME}\"\n    _time_start=$(date +%s)\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_start}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing start\"\n    _time_end=$(date +%s)\n    _time_elapsed=$((_time_end-_time_start))\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_end}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing end\"\n    printf \"elapsed time: %dd%02dh%02dm%02ds\\n\" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Complete ${_PROG_NAME}\"\n  } >> \"${_PATH_LOGS}\" 2>&1\n  exit 0"
      }
    ]
  },
  "software": {
		"extraRepositories": [
			{
        "alias": "repo-oss",
        "url": "https://download.opensuse.org/distribution/leap/16.0/repo/oss/"
			},
			{
        "alias": "repo-update-oss",
        "url": "https://download.opensuse.org/update/leap/16.0/oss/"
			}
		],
    "patterns": [
      "apparmor",
      "base",
      "basesystem",
      "documentation",
      "enhanced_base",
      "minimal_base"
    ],
    "packages": [
      "sudo",
      "firewalld",
      "traceroute",
      "NetworkManager",
      "bash-completion",
      "curl",
      "vim",
      "bc",
      "tree",
      "openssh-server",
      "systemd-network",
      "dnsmasq",
      "tftp",
      "bind-utils",
      "apache2",
      "samba",
      "samba-client",
      "cifs-utils",
      "samba-winbind",
      "open-vm-tools",
      "open-vm-tools-desktop",
      "fuse",
      "glibc-i18ndata",
      "glibc-locale",
      "less",
      "wget",
      "which",
      "zypper"
    ]
  },
  "legacyAutoyastStorage": [
    {
      "device": "/dev/nvme0n1",
      "initialize": true,
      "partitions": [],
      "type": "CT_DISK",
      "use": "all"
    }
  ]
}
