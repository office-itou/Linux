{
// fixed parameter
  "bootloader": {
    "extraKernelParams": ""
  },
  "hostname": {
    "static": "sv-opensuse.workgroup"
  },
  "network": {
    "connections": [
      {
        "id": "Wired connection 1",
        "interface": "ens160",
        "method6": "auto",
        "method4": "manual",
        "gateway4": "192.168.1.254",
        "addresses": ["192.168.1.1/24"],
        "nameservers": ["192.168.1.254"]
      }
    ]
  },
// fixed parameter
  "localization": {
    "language": "ja_JP.UTF-8",
    "keyboard": "jp",
    "timezone": "Asia/Tokyo"
  },
  "product": {
    "id": "Tumbleweed"
  },
  "root": {
    "password": "r00t"
  },
  "user": {
    "userName": "master",
    "fullName": "Master",
    "password": "master"
  },
  "scripts": {
    "pre": [
      {
        "name": "zzz_pre-scripts.sh",
        "content": "#!/bin/sh\n  set -eu\n  exec 2>&1\n  export LANG=C\n  _PROG_PATH=\"${0:-}\"\n  _PROG_NAME=\"${_PROG_PATH##*/}\"\n  _FUNC_NAME=\"${_PROG_NAME:-pre-scripts}\"\n  _COMD_LINE=\"$(cat /proc/cmdline)\"\n  for _LINE in ${_COMD_LINE}\n  do\n    case \"${_LINE}\" in\n      debug              ) _FLAG_DBGS=\"true\"; set -x;;\n      debugout|dbg|dbgout) _FLAG_DBGS=\"true\";;\n      *) ;;\n    esac\n  done\n  _DIRS_TGET=\"/mnt\"\n  if [ -n \"${_DIRS_TGET}\" ] && [ ! -d \"${_DIRS_TGET}/root/.\" ]; then\n    _DIRS_TGET=\"\"\n  fi\n  _DIRS_INST=\"/var/adm/autoinst\"\n  _PATH_LOGS=\"${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log\"\n  mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n  chmod 0600 \"${_DIRS_TGET}${_DIRS_INST}\"\n  {\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Running ${_PROG_NAME}\"\n    _time_start=$(date +%s)\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_start}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing start\"\n    _PATH_SEED=\"\"\n    _PATH=\"/var/lib/cdebconf/questions.dat\"\n    if [ -f \"${_PATH}\" ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"find ${_PATH##*/}\"\n      _PATH_SEED=\"$(awk '$1==\"Name:\"&&($2==\"preseed/url\"||$2==\"preseed/file\"),$1==\"\" {if ($1==\"Value:\") {print $2;}}' \"${_PATH}\")\"\n      cp -a \"${_PATH}\" \"${_DIRS_TGET}${_DIRS_INST}/\"\n    fi\n    _PATH=\"/var/lib/cloud/data/result.json\"\n    if [ -f \"${_PATH}\" ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"find ${_PATH##*/}\"\n      _PATH_DEVS=\"$(awk '/DataSourceNoCloud/ {sub(/.*\\//,\"\"); sub(/[^[:alnum:]].*/,\"\"); print $0;}' \"${_PATH}\")\"\n      _PATH_SEED=\"/user-data\"\n    fi\n    if [ -n \"${AutoYaST:-}\" ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"find AutoYaST=${AutoYaST}\"\n      _PATH_DEVS=\"${Device:-}\"\n      _PATH_SEED=\"${AutoYaST#*\"${_PATH_DEVS}\"}\"\n    fi\n    _DIRS_COMD=\"${_PATH_SEED%/*}\"\n    _DIRS_COMD=\"${_DIRS_COMD%/*}/script\"\n    for _LINE in ${_COMD_LINE}\n    do\n      case \"${_LINE}\" in\n        debug|debugout|dbg|dbgout ) _FLAG_DBGS=\"true\";;\n        iso-url=*.iso |url=*.iso  ) ;;\n        preseed/url=* |url=*      ) _PATH_SEED=\"${_LINE#*url=}\"\n                                    _DIRS_COMD=\"${_PATH_SEED%/*}\"\n                                    _DIRS_COMD=\"${_DIRS_COMD%/*}/script\";;\n        preseed/file=*|file=*     ) _PATH_SEED=\"${_LINE#*file=}\"\n                                    _DIRS_COMD=\"${_PATH_SEED%/*}\"\n                                    _DIRS_COMD=\"${_DIRS_COMD%/*}/script\";;\n        ds=nocloud*               ) _PATH_SEED=\"${_LINE#*ds=nocloud*=}\"\n                                    _PATH_SEED=\"${_PATH_SEED%/}/user-data\"\n                                    _DIRS_COMD=\"${_PATH_SEED%/}\"\n                                    _DIRS_COMD=\"${_DIRS_COMD%/nocloud*}/script\";;\n        inst.ks=*                 ) _PATH_SEED=\"${_LINE#*inst.ks=}\"\n                                    case \"${_PATH_SEED}\" in\n                                      http:*|https:*|ftp:*|tftp:*)\n                                        _DIRS_COMD=\"${_PATH_SEED%/*}\"\n                                        _DIRS_COMD=\"${_DIRS_COMD%/*}/script\";;\n                                      hd:sr0:*|cdrom|cdrom:*)\n                                        _PATH_SEED=\"/mnt/install/repo/${_PATH_SEED#*:*/}\"\n                                        _DIRS_COMD=\"${_PATH_SEED%/*}\"\n                                        _DIRS_COMD=\"${_DIRS_COMD%/*}/script\";;\n                                      nfs:*                 ) ;;\n                                      hd:*                  ) ;;\n                                      hmc                   ) ;;\n                                      *) ;;\n                                    esac;;\n        autoyast=*                ) if [ -z \"${AutoYaST:-}\" ]; then\n                                      _PATH_SEED=\"${_LINE#*autoyast=}\"\n                                      _DIRS_COMD=\"${_PATH_SEED%/*}\"\n                                      _DIRS_COMD=\"${_DIRS_COMD%/*}/script\"\n                                    fi;;\n        inst.auto=*               ) _PATH_SEED=\"${_LINE#*inst.auto=}\"\n                                    case \"${_PATH_SEED}\" in\n                                      device:*)\n                                        _PATH_DEVS=\"${_PATH_SEED#device://}\"\n                                        _PATH_DEVS=\"${_PATH_DEVS%/*}\"\n                                        _PATH_SEED=\"${_PATH_SEED#*\"${_PATH_DEVS}\"}\";;\n                                      usb:*) ;;\n                                      label:*) ;;\n                                      hd:*|dvd:*|cd:*)\n                                        _PATH_DEVS=\"${_PATH_SEED#*devices=}\"\n                                        _PATH_DEVS=\"${_PATH_DEVS#/dev/}\"\n                                        _PATH_SEED=\"${_PATH_SEED#*:}\"\n                                        _PATH_SEED=\"${_PATH_SEED%\\?*}\"\n                                        _DIRS_COMD=\"${_PATH_SEED%/*}\"\n                                        _DIRS_COMD=\"${_DIRS_COMD%/*}/script\";;\n                                      http:*|https:*|ftp:*|tftp:*)\n                                        _DIRS_COMD=\"${_PATH_SEED%/*}\"\n                                        _DIRS_COMD=\"${_DIRS_COMD%/*}/script\";;\n                                      smb:*                 ) ;;\n                                      nfs:*                 ) ;;\n                                      file:*                ) ;;\n                                      *) ;;\n                                    esac;;\n        *) ;;\n      esac\n    done\n    if [ -n \"${_FLAG_DBGS:-}\" ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"debug print\"\n      printf \"%s: %s=[%s]\\n\" \"${_FUNC_NAME}\" \"LANG      \" \"${LANG:-}\"\n      printf \"%s: %s=[%s]\\n\" \"${_FUNC_NAME}\" \"_FUNC_NAME\" \"${_FUNC_NAME:-}\"\n      printf \"%s: %s=[%s]\\n\" \"${_FUNC_NAME}\" \"_DIRS_TGET\" \"${_DIRS_TGET:-}\"\n      printf \"%s: %s=[%s]\\n\" \"${_FUNC_NAME}\" \"_DIRS_INST\" \"${_DIRS_INST:-}\"\n      printf \"%s: %s=[%s]\\n\" \"${_FUNC_NAME}\" \"_PATH_LOGS\" \"${_PATH_LOGS:-}\"\n      printf \"%s: %s=[%s]\\n\" \"${_FUNC_NAME}\" \"_PATH_SEED\" \"${_PATH_SEED:-}\"\n      printf \"%s: %s=[%s]\\n\" \"${_FUNC_NAME}\" \"_DIRS_COMD\" \"${_DIRS_COMD:-}\"\n    fi\n    {\n      echo \"nameserver 8.8.8.8\"\n      echo \"nameserver 8.8.4.4\"\n    } >>  /etc/resolv.conf\n    _PATH=\"/run/systemd/resolve/stub-resolv.conf\"\n    if [ ! -e \"${_PATH}\" ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"copy ${_PATH##/*}\"\n      mkdir -p /run/systemd/resolve\n      cp -p /etc/resolv.conf \"${_PATH}\"\n    fi\n    if [ -n \"${_PATH_SEED:-}\" ]; then\n      if [ -n \"${_PATH_DEVS:-}\" ]; then\n        _PATH_DEVS=\"/dev/${_PATH_DEVS}\"\n        if [ -e \"${_PATH_DEVS}\" ]; then\n          printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"mount: [${_PATH_DEVS}]\"\n          _MNTP=\"/tmp/autoinst-mnt\"\n          mkdir -p \"${_MNTP}\"\n          mount -r \"${_PATH_DEVS}\" \"${_MNTP}\"\n          _PATH_SEED=\"${_MNTP}${_PATH_SEED}\"\n          _DIRS_COMD=\"${_MNTP}${_DIRS_COMD}\"\n        fi\n      fi\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"file copy\"\n      for _PATH in \"${_PATH_SEED}\"                       \\\n                   \"${_DIRS_COMD}/autoinst_cmd_early.sh\" \\\n                   \"${_DIRS_COMD}/autoinst_cmd_late.sh\"  \\\n                   \"${_DIRS_COMD}/autoinst_cmd_part.sh\"  \\\n                   \"${_DIRS_COMD}/autoinst_cmd_run.sh\"\n      do\n        printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"copy: [${_PATH}]\"\n        case \"${_PATH}\" in\n          http:*|https:*|ftp:*|tftp:*)\n            if command -v wget > /dev/null 2>&1; then\n              wget --tries=3 --timeout=10 --quiet --continue --show-progress --progress=bar --output-document \"${_DIRS_TGET:-}${_DIRS_INST}/${_PATH##*/}\" \"${_PATH}\" || true\n            else\n              curl --location --http1.1 --no-progress-bar --remote-time -S -f --retry-max-time 3 --retry 3 --connect-timeout 60 --progress-bar --continue-at - --create-dirs --output-dir \"${_DIRS_TGET}${_DIRS_INST}\" --output \"${_PATH##*/}\" \"${_PATH}\" || true\n            fi;;\n          file:*|/*                  ) cp -a \"${_PATH#*:*//}\" \"${_DIRS_TGET}${_DIRS_INST}/\" || true;;\n          *) ;;\n        esac\n        if [ \"${_PATH}\" != \"${_PATH_SEED}\" ] && [ -e \"${_DIRS_TGET}${_DIRS_INST}/${_PATH##*/}\" ]; then\n          chmod 0700 \"${_DIRS_TGET}${_DIRS_INST}/${_PATH##*/}\"\n        fi\n      done\n      if [ -n \"${_MNTP:-}\" ]; then\n        printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"umount: [${_PATH_DEVS}]\"\n        umount \"${_MNTP}\"\n      fi\n    fi\n    _PATH_EXEC=\"${_DIRS_TGET}${_DIRS_INST}/autoinst_cmd_part.sh\"\n    if [ -e \"${_PATH_EXEC}\" ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"exec: ${_PATH_EXEC}\"\n      sh -c \"${_PATH_EXEC} nvme0n1\"\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"complete: ${_PATH_EXEC}\"\n    fi\n    _time_end=$(date +%s)\n    _time_elapsed=$((_time_end-_time_start))\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_end}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing end\"\n    printf \"elapsed time: %dd%02dh%02dm%02ds\\n\" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Complete ${_PROG_NAME}\"\n  } >> \"${_PATH_LOGS}\" 2>&1\n  exit 0"
      }
    ],
    "postPartitioning": [
      {
        "name": "zzz_postpartitioning-scripts.sh",
        "content": "#!/bin/sh\n  set -eu\n  exec 2>&1\n  export LANG=C\n  _PROG_PATH=\"${0:-}\"\n  _PROG_NAME=\"${_PROG_PATH##*/}\"\n  _FUNC_NAME=\"${_PROG_NAME:-postpartitioning-scripts}\"\n  _COMD_LINE=\"$(cat /proc/cmdline)\"\n  for _LINE in ${_COMD_LINE}\n  do\n    case \"${_LINE}\" in\n      debug              ) _FLAG_DBGS=\"true\"; set -x;;\n      debugout|dbg|dbgout) _FLAG_DBGS=\"true\";;\n      *) ;;\n    esac\n  done\n  _DIRS_TGET=\"/mnt\"\n  if [ -n \"${_DIRS_TGET}\" ] && [ ! -d \"${_DIRS_TGET}/root/.\" ]; then\n    _DIRS_TGET=\"\"\n  fi\n  _DIRS_INST=\"/var/adm/autoinst\"\n  _PATH_LOGS=\"${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log\"\n  mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n  chmod 0600 \"${_DIRS_TGET}${_DIRS_INST}\"\n  {\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Running ${_PROG_NAME}\"\n    _time_start=$(date +%s)\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_start}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing start\"\n    _time_end=$(date +%s)\n    _time_elapsed=$((_time_end-_time_start))\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_end}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing end\"\n    printf \"elapsed time: %dd%02dh%02dm%02ds\\n\" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Complete ${_PROG_NAME}\"\n  } >> \"${_PATH_LOGS}\" 2>&1\n  exit 0"
      }
    ],
    "post": [
      {
        "name": "zzz_post_1_services-scripts.sh",
        "chroot": true,
        "content": "#!/bin/sh\n  set -eu\n  exec 2>&1\n  export LANG=C\n  _PROG_PATH=\"${0:-}\"\n  _PROG_NAME=\"${_PROG_PATH##*/}\"\n  _FUNC_NAME=\"${_PROG_NAME:-post-services-scripts}\"\n  _COMD_LINE=\"$(cat /proc/cmdline)\"\n  for _LINE in ${_COMD_LINE}\n  do\n    case \"${_LINE}\" in\n      debug              ) _FLAG_DBGS=\"true\"; set -x;;\n      debugout|dbg|dbgout) _FLAG_DBGS=\"true\";;\n      *) ;;\n    esac\n  done\n  _DIRS_TGET=\"/mnt\"\n  if [ -n \"${_DIRS_TGET}\" ] && [ ! -d \"${_DIRS_TGET}/root/.\" ]; then\n    _DIRS_TGET=\"\"\n  fi\n  _DIRS_INST=\"/var/adm/autoinst\"\n  _PATH_LOGS=\"${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log\"\n  mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n  chmod 0600 \"${_DIRS_TGET}${_DIRS_INST}\"\n  {\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Running ${_PROG_NAME}\"\n    _time_start=$(date +%s)\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_start}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing start\"\n#   systemctl set-default graphical.target\n#   systemctl disable wicked\n    systemctl enable firewalld\n    systemctl enable systemd-resolved\n    systemctl enable systemd-timesyncd\n    systemctl enable NetworkManager\n    systemctl enable dnsmasq\n    systemctl enable sshd\n    systemctl enable apache2\n    systemctl enable smb\n    systemctl enable nmb\n    systemctl enable winbind\n    _time_end=$(date +%s)\n    _time_elapsed=$((_time_end-_time_start))\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_end}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing end\"\n    printf \"elapsed time: %dd%02dh%02dm%02ds\\n\" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Complete ${_PROG_NAME}\"\n  } >> \"${_PATH_LOGS}\" 2>&1\n  exit 0\n"
      },
      {
        "name": "zzz_post_2_chroot-scripts.sh",
        "chroot": false,
        "content": "#!/bin/sh\n  set -eu\n  exec 2>&1\n  export LANG=C\n  _PROG_PATH=\"${0:-}\"\n  _PROG_NAME=\"${_PROG_PATH##*/}\"\n  _FUNC_NAME=\"${_PROG_NAME:-post-chroot-scripts}\"\n  _COMD_LINE=\"$(cat /proc/cmdline)\"\n  for _LINE in ${_COMD_LINE}\n  do\n    case \"${_LINE}\" in\n      debug              ) _FLAG_DBGS=\"true\"; set -x;;\n      debugout|dbg|dbgout) _FLAG_DBGS=\"true\";;\n      *) ;;\n    esac\n  done\n  _DIRS_TGET=\"/mnt\"\n  if [ -n \"${_DIRS_TGET}\" ] && [ ! -d \"${_DIRS_TGET}/root/.\" ]; then\n    _DIRS_TGET=\"\"\n  fi\n  _DIRS_INST=\"/var/adm/autoinst\"\n  _PATH_LOGS=\"${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log\"\n  mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n  chmod 0600 \"${_DIRS_TGET}${_DIRS_INST}\"\n  {\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Running ${_PROG_NAME}\"\n    _time_start=$(date +%s)\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_start}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing start\"\n    if [ -n \"${_DIRS_TGET}\" ] && [ -n \"${_DIRS_INST}\" ] && [ -d \"${_DIRS_INST}\"/. ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"file copy\"\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"copy: ${_DIRS_INST}\"\n      mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n      cp -a \"${_DIRS_INST}\"/. \"${_DIRS_TGET}${_DIRS_INST}\"\n    fi\n    _PATH_EXEC=\"${_DIRS_INST}/autoinst_cmd_late.sh\"\n    if [ -e \"${_DIRS_TGET}${_PATH_EXEC}\" ]; then\n      printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"exec: ${_PATH_EXEC}\"\n      if [ -z \"${_DIRS_TGET}\" ]; then\n        if sh -c \"${_PATH_EXEC}\"; then\n          printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"complete: ${_PATH_EXEC}\"\n        else\n          printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"failed: ${_PATH_EXEC}\"\n        fi\n      else\n        mount --rbind /dev  \"${_DIRS_TGET}\"/dev\n        mount --rbind /proc \"${_DIRS_TGET}\"/proc\n        mount --rbind /run  \"${_DIRS_TGET}\"/run\n        mount --rbind /sys  \"${_DIRS_TGET}\"/sys\n        mount --rbind /tmp  \"${_DIRS_TGET}\"/tmp\n        mount --make-rslave \"${_DIRS_TGET}\"/dev\n        mount --make-rslave \"${_DIRS_TGET}\"/sys\n        systemctl daemon-reload || true\n        if chroot \"${_DIRS_TGET}\"/ sh -c \"${_PATH_EXEC}\"; then\n          printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"complete: ${_PATH_EXEC}\"\n        else\n          printf \"### %s: %s ###\\n\" \"${_FUNC_NAME}\" \"failed: ${_PATH_EXEC}\"\n        fi\n#       umount -R \"${_DIRS_TGET}\" || true\n      fi\n    fi\n    _time_end=$(date +%s)\n    _time_elapsed=$((_time_end-_time_start))\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_end}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing end\"\n    printf \"elapsed time: %dd%02dh%02dm%02ds\\n\" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Complete ${_PROG_NAME}\"\n  } >> \"${_PATH_LOGS}\" 2>&1\n  exit 0"
      }
    ],
    "init": [
      {
        "name": "zzz_init-scripts.sh",
        "content": "#!/bin/sh\n  set -eu\n  exec 2>&1\n  export LANG=C\n  _PROG_PATH=\"${0:-}\"\n  _PROG_NAME=\"${_PROG_PATH##*/}\"\n  _FUNC_NAME=\"${_PROG_NAME:-init-scripts}\"\n  _COMD_LINE=\"$(cat /proc/cmdline)\"\n  for _LINE in ${_COMD_LINE}\n  do\n    case \"${_LINE}\" in\n      debug              ) _FLAG_DBGS=\"true\"; set -x;;\n      debugout|dbg|dbgout) _FLAG_DBGS=\"true\";;\n      *) ;;\n    esac\n  done\n  _DIRS_TGET=\"/mnt\"\n  if [ -n \"${_DIRS_TGET}\" ] && [ ! -d \"${_DIRS_TGET}/root/.\" ]; then\n    _DIRS_TGET=\"\"\n  fi\n  _DIRS_INST=\"/var/adm/autoinst\"\n  _PATH_LOGS=\"${_DIRS_TGET}${_DIRS_INST}/${_FUNC_NAME}.log\"\n  mkdir -p \"${_DIRS_TGET}${_DIRS_INST}\"\n  chmod 0600 \"${_DIRS_TGET}${_DIRS_INST}\"\n  {\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Running ${_PROG_NAME}\"\n    _time_start=$(date +%s)\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_start}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing start\"\n    systemctl --no-pager list-dependencies\n    update-ca-certificates\n    zypper ref -s\n    zypper update\n    _time_end=$(date +%s)\n    _time_elapsed=$((_time_end-_time_start))\n    printf \"\\033[m\\033[45m%s\\033[m\\n\" \"$(date -d \"@${_time_end}\" +\"%Y/%m/%d %H:%M:%S\" || true) processing end\"\n    printf \"elapsed time: %dd%02dh%02dm%02ds\\n\" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))\n    printf \"\\033[m\\033[42m%s\\033[m\\n\" \"Complete ${_PROG_NAME}\"\n  } >> \"${_PATH_LOGS}\" 2>&1\n  exit 0"
      }
    ]
  },
  "software": {
    "patterns": [
// desktop
      "gnome",
// desktop
      "apparmor",
      "base",
      "documentation",
      "enhanced_base",
      "minimal_base"
    ],
    "packages": [
// desktop
      "rhythmbox",
// desktop
      "lvm2",
      "restorecond",
      "policycoreutils",
      "setools-console",
      "selinux-policy-targeted",
      "selinux-policy-devel",
      "sudo",
      "firewalld",
      "traceroute",
      "NetworkManager",
      "bash-completion",
      "curl",
      "vim",
      "bc",
      "tree",
      "openssh-server",
      "systemd-resolved",
      "dnsmasq",
      "tftp",
      "bind-utils",
      "apache2",
      "samba",
      "samba-client",
      "cifs-utils",
      "samba-winbind",
      "open-vm-tools",
      "open-vm-tools-desktop",
      "fuse",
      "glibc-i18ndata",
      "glibc-locale",
      "less",
      "wget",
      "which",
      "zypper"
    ]
  },
  "storage": {
    "drives": [
      {
        "search": {
          "condition": {
            "name": "/dev/nvme0n1"
          },
          "ifNotFound": "error"
        },
        "alias": "pvs-disk",
        "partitions": [
          {
            "search": {
              "ifNotFound": "skip"
            },
            "delete": true
          }
        ]
      }
    ],
    "volumeGroups": [
      {
        "name": "system",
        "physicalVolumes": [
          { "generate": [ "pvs-disk" ] }
        ],
        "logicalVolumes": [
          {
            "filesystem": {
              "path": "/",
              "type": "btrfs"
            },
            "name": "root"
          },
          {
            "filesystem": {
              "path": "swap",
              "type": "swap"
            },
            "name": "swap"
          }
        ]
      }
    ]
  }
}
