#version=DEVEL ----------------------------------------------------------------

# License agreement -----------------------------------------------------------
eula --agreed

# Use graphical or text mode install ------------------------------------------
#graphical
#text

# System language -------------------------------------------------------------
lang ja_JP.UTF-8

# Keyboard layouts ------------------------------------------------------------
keyboard --xlayouts='jp'

# System timezone -------------------------------------------------------------
timezone Asia/Tokyo --utc
timesource --ntp-server=ntp.nict.jp
#timezone Asia/Tokyo --isUtc --ntpservers=ntp.nict.jp

# Network information ---------------------------------------------------------
#network --activate --bootproto=static --device=ens160 --ip=192.168.1.1 --netmask=255.255.255.0 --gateway=192.168.1.254 --ipv6=auto --nameserver=::1,127.0.0.1,192.168.1.254 --hostname=sv-centos-stream.workgroup

# Use CD-ROM, hard drive, or network mode installation ------------------------
#cdrom
#harddrive --dir= --partition=LABEL=$label

# Use network installation (fedora) -------------------------------------------
#url  --metalink=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&arch=$basearch

# Use network installation (centos stream) ------------------------------------
url  --metalink=https://mirrors.centos.org/metalink?repo=centos-baseos-$stream&arch=$basearch&protocol=https,http
repo --metalink=https://mirrors.centos.org/metalink?repo=centos-appstream-$stream&arch=$basearch&protocol=https,http --name=AppStream

# Use network installation (almalinux) ----------------------------------------
#url  --mirrorlist=https://mirrors.almalinux.org/mirrorlist/$releasever/baseos
#repo --mirrorlist=https://mirrors.almalinux.org/mirrorlist/$releasever/appstream --name=AppStream

# Use network installation (rockylinux) ---------------------------------------
#url  --mirrorlist=https://mirrors.rockylinux.org/mirrorlist?arch=$basearch&repo=BaseOS-$releasever$rltype
#repo --mirrorlist=https://mirrors.rockylinux.org/mirrorlist?arch=$basearch&repo=AppStream-$releasever$rltype --name=AppStream

# Use network installation (miraclelinux) -------------------------------------
#url  --mirrorlist=https://repo.dist.miraclelinux.net/miraclelinux/mirrorlist/$releasever/$basearch/baseos
#repo --mirrorlist=https://repo.dist.miraclelinux.net/miraclelinux/mirrorlist/$releasever/$basearch/appstream --name=AppStream

# Use network installation (web address) --------------------------------------
#url         --url=http://192.168.1.12/imgs/centos-stream-9/
#repo    --baseurl=http://192.168.1.12/imgs/centos-stream-9/AppStream/ --name=AppStream

# Extra Packages for Enterprise Linux (EPEL) ----------------------------------

# Clear the Master Boot Record ------------------------------------------------
zerombr

# Partition clearing information ----------------------------------------------
#clearpart --all --initlabel --drives=sda
#ignoredisk --only-use=sda
clearpart --all --initlabel --drives=nvme0n1
ignoredisk --only-use=nvme0n1

# System bootloader configuration ---------------------------------------------
#bootloader --append="crashkernel=auto" --location=mbr --boot-drive=sda
bootloader --append="crashkernel=auto" --location=mbr --boot-drive=nvme0n1
autopart --type=lvm --nohome

# Run the Setup Agent on first boot -------------------------------------------
#firstboot --enable

# Reboot after installation ---------------------------------------------------
reboot --eject

# SSH -------------------------------------------------------------------------
#sshpw --username=root r00t

# Root password ----------------------------------------------------------------
rootpw --lock

# User password ----------------------------------------------------------------
user --groups=wheel --name=master --password=master --gecos="Master"

# SELinux configuration -------------------------------------------------------
selinux --enforcing

# Firewall configuration ------------------------------------------------------
firewall --enabled

# X Window System configuration information -----------------------------------
#xconfig --startxonboot

# System services -------------------------------------------------------------
services --disabled=avahi-daemon --enabled=systemd-resolved.service,dnsmasq,httpd,winbind,smb,nmb

# -----------------------------------------------------------------------------
%packages
@core
@standard
@gnome-desktop
sudo
firewalld
traceroute
NetworkManager
bash-completion
curl
vim
bc
tree
openssh-server
systemd-resolved
dnsmasq
tftp-server
bind-utils
httpd
samba
samba-client
cifs-utils
samba-winbind
open-vm-tools
open-vm-tools-desktop
fuse
%end
#clamav
#@dns-server
#bind-utils
#dhcp-server
#@gnome-desktop
#open-vm-tools
#open-vm-tools-desktop

# backup ----------------------------------------------------------------------
#epel-release

# -----------------------------------------------------------------------------
%addon com_redhat_kdump --disable
%end

# -----------------------------------------------------------------------------
#%anaconda
#pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
#pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
#pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
#%end

%onerror
#!/bin/sh
cp -p /etc/ssh/sshd_config.anaconda /etc/ssh/sshd_config
systemctl restart sshd
%end

# -----------------------------------------------------------------------------
%pre --erroronfail --log=/var/adm/autoinst/ks-pre.log
#!/bin/sh
  exec 2>&1
  export LANG=C
  _FUNC_NAME="pre_command"
  _COMD_LINE="$(cat /proc/cmdline)"
  for _LINE in ${_COMD_LINE:-}
  do
    case "${_LINE}" in
      debug              ) _FLAG_DBGS="true"; set -x;;
      debugout|dbg|dbgout) _FLAG_DBGS="true";;
      *) ;;
    esac
  done
  _DIRS_TGET=""
  if [ -n "${_DIRS_TGET:-}" ] && [ ! -d "${_DIRS_TGET:-}/." ]; then
    _DIRS_TGET=""
  fi
  _DIRS_INST="/var/adm/autoinst"
  _PATH_LOGS="${_DIRS_TGET:-}${_DIRS_INST}/${_FUNC_NAME}.log"
  mkdir -p "${_DIRS_TGET:-}${_DIRS_INST}"
  chmod 0600 "${_DIRS_TGET:-}${_DIRS_INST}"
  {
    _time_start=$(date +%s)
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"
    _PATH="/var/lib/cdebconf/questions.dat"
    if [ -f "${_PATH}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "find ${_PATH##*/}"
      _PATH_SEED="$(awk '$1=="Name:"&&($2=="preseed/url"||$2=="preseed/file"),$1=="" {if ($1=="Value:") {print $2;}}' "${_PATH}")"
      _DIRS_COMD="${_PATH_SEED%/*}"
      _DIRS_COMD="${_DIRS_COMD%/*}/script"
      cp -a "${_PATH}" "${_DIRS_TGET:-}${_DIRS_INST}/"
    fi
    for _LINE in ${_COMD_LINE:-}
    do
      case "${_LINE}" in
        debug|debugout|dbg|dbgout) _FLAG_DBGS="true"                            ;;
        iso-url=*.iso |url=*.iso )                                              ;;
        preseed/url=* |url=*     ) _PATH_SEED="${_LINE#*url=}"
                                   _DIRS_COMD="${_PATH_SEED%/*}"
                                   _DIRS_COMD="${_DIRS_COMD%/*}/script";;
        preseed/file=*|file=*    ) _PATH_SEED="${_LINE#*file=}"
                                   _DIRS_COMD="${_PATH_SEED%/*}"
                                   _DIRS_COMD="${_DIRS_COMD%/*}/script";;
        ds=nocloud*              ) _PATH_SEED="${_LINE#*ds=nocloud*=}"
                                   _PATH_SEED="${_PATH_SEED%/}/user-data"
                                   _DIRS_COMD="${_PATH_SEED%/}"
                                   _DIRS_COMD="${_DIRS_COMD%/nocloud*}/script";;
        inst.ks=*                ) _PATH_SEED="${_LINE#*inst.ks=}"
                                   case "${_PATH_SEED}" in
                                     http:*|https:*|ftp:*  )
                                       _DIRS_COMD="${_PATH_SEED%/*}"
                                       _DIRS_COMD="${_DIRS_COMD%/*}/script";;
                                     hd:sr0:*|cdrom|cdrom:*)
                                       _PATH_SEED="/mnt/install/repo/${_PATH_SEED#*:*/}"
                                       _DIRS_COMD="${_PATH_SEED%/*}"
                                       _DIRS_COMD="${_DIRS_COMD%/*}/script";;
                                     nfs:*                 ) ;;
                                     hd:*                  ) ;;
                                     hmc                   ) ;;
                                     *) ;;
                                   esac;;
        autoyast=*               ) _PATH_SEED="${_LINE#*autoyast=}"             ;;
        *) ;;
      esac
    done
    if [ -n "${_FLAG_DBGS:-}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "debug print"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "LANG      " "${LANG:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_FUNC_NAME" "${_FUNC_NAME:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_DIRS_TGET" "${_DIRS_TGET:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_DIRS_INST" "${_DIRS_INST:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_PATH_LOGS" "${_PATH_LOGS:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_PATH_SEED" "${_PATH_SEED:-}"
      printf "%s: %s=[%s]\n" "${_FUNC_NAME}" "_DIRS_COMD" "${_DIRS_COMD:-}"
    fi
    if [ ! -e /run/systemd/resolve/stub-resolv.conf ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "copy stub-resolv.conf"
      mkdir -p /run/systemd/resolve
      cp -p /etc/resolv.conf /run/systemd/resolve/stub-resolv.conf
    fi
    {
      echo "nameserver 8.8.8.8"
      echo "nameserver 8.8.4.4"
    } >>  /etc/resolv.conf
    if [ -n "${_PATH_SEED:-}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "file copy"
      for _PATH in "${_PATH_SEED}"                       \
                   "${_DIRS_COMD}/autoinst_cmd_early.sh" \
                   "${_DIRS_COMD}/autoinst_cmd_late.sh"  \
                   "${_DIRS_COMD}/autoinst_cmd_part.sh"  \
                   "${_DIRS_COMD}/autoinst_cmd_run.sh"
      do
        printf "### %s: %s ###\n" "${_FUNC_NAME}" "copy: [${_PATH}]"
        case "${_PATH}" in
          http:*|https:*|ftp:*) curl --location --http1.1 --no-progress-bar --remote-time --show-error --fail --retry-max-time 3 --retry 3 --connect-timeout 60 --progress-bar --continue-at - --create-dirs --output-dir "${_DIRS_TGET:-}${_DIRS_INST}" --output "${_PATH##*/}" "${_PATH}";;
          file:* | /*         ) cp -a "/${_PATH#*:*/}" "${_DIRS_TGET:-}${_DIRS_INST}/";; \
          *) ;;
        esac
        chmod 0700 "${_DIRS_TGET:-}${_DIRS_INST}/${_PATH##*/}"
      done
    fi
    _PATH_EXEC="${_DIRS_TGET:-}${_DIRS_INST}/autoinst_cmd_part.sh"
    if [ -e "${_PATH_EXEC}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "exec: ${_PATH_EXEC}"
      sh -c "${_PATH_EXEC} nvme0n1"
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "complete: ${_PATH_EXEC}"
    fi
    _time_end=$(date +%s)
    _time_elapsed=$((_time_end-_time_start))
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"
    printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))
  } >> "${_PATH_LOGS}" 2>&1
  exit 0
%end

# -----------------------------------------------------------------------------
%post --erroronfail --nochroot --log=/mnt/sysimage/var/adm/autoinst/ks-post.log
#!/bin/sh
  exec 2>&1
  export LANG=C
  _FUNC_NAME="post_command"
  _COMD_LINE="$(cat /proc/cmdline)"
  for _LINE in ${_COMD_LINE:-}
  do
    case "${_LINE}" in
      debug              ) _FLAG_DBGS="true"; set -x;;
      debugout|dbg|dbgout) _FLAG_DBGS="true";;
      *) ;;
    esac
  done
  _DIRS_TGET="/mnt/sysimage"
  if [ ! -d "${_DIRS_TGET:-}/." ]; then
    _DIRS_TGET=""
  fi
  _DIRS_INST="/var/adm/autoinst"
  _PATH_LOGS="${_DIRS_TGET:-}${_DIRS_INST}/${_FUNC_NAME}.log"
  mkdir -p "${_DIRS_TGET:-}${_DIRS_INST}"
  chmod 0600 "${_DIRS_TGET:-}${_DIRS_INST}"
  {
    _time_start=$(date +%s)
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_start}" +"%Y/%m/%d %H:%M:%S" || true) processing start"
    if [ -n "${_DIRS_TGET:-}" ] && [ -d "${_DIRS_INST}/." ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "file copy"
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "copy: ${_DIRS_INST}"
      cp -a "${_DIRS_INST}/." "${_DIRS_TGET:-}${_DIRS_INST}"
    fi
    _PATH_EXEC="${_DIRS_INST}/autoinst_cmd_late.sh"
    if [ -e "${_DIRS_TGET:-}${_PATH_EXEC}" ]; then
      printf "### %s: %s ###\n" "${_FUNC_NAME}" "exec: ${_PATH_EXEC}"
      mount --rbind /dev  "${_DIRS_TGET:?}"/dev
      mount --rbind /proc "${_DIRS_TGET:?}"/proc
      mount --rbind /run  "${_DIRS_TGET:?}"/run
      mount --rbind /sys  "${_DIRS_TGET:?}"/sys
      mount --rbind /tmp  "${_DIRS_TGET:?}"/tmp
      mount --make-rslave "${_DIRS_TGET:?}"/dev
      mount --make-rslave "${_DIRS_TGET:?}"/sys
      systemctl daemon-reload
      if chroot "${_DIRS_TGET:?}"/ sh -c "${_PATH_EXEC}"; then
        printf "### %s: %s ###\n" "${_FUNC_NAME}" "complete: ${_PATH_EXEC}"
      else
        printf "### %s: %s ###\n" "${_FUNC_NAME}" "failed: ${_PATH_EXEC}"
      fi
      umount -R "${_DIRS_TGET:?}" || true
    fi
    _time_end=$(date +%s)
    _time_elapsed=$((_time_end-_time_start))
    printf "\033[m\033[45m%s\033[m\n" "$(date -d "@${_time_end}" +"%Y/%m/%d %H:%M:%S" || true) processing end"
    printf "elapsed time: %dd%02dh%02dm%02ds\n" $((_time_elapsed/86400)) $((_time_elapsed%86400/3600)) $((_time_elapsed%3600/60)) $((_time_elapsed%60))
  } >> "${_PATH_LOGS}" 2>&1
  exit 0
%end
#yum list available | grep 'package name'

# --- eof ---------------------------------------------------------------------
# Memo ------------------------------------------------------------------------
# https://access.redhat.com/documentation/ja-jp/red_hat_enterprise_linux/6/html/installation_guide/sect-kickstart-examples
# https://access.redhat.com/documentation/ja-jp/red_hat_enterprise_linux/6/html/installation_guide/s1-kickstart2-startinginstall
# Memo ------------------------------------------------------------------------
# dnf install pykickstart
# ksvalidator /path/to/kickstart.ks
# Memo ------------------------------------------------------------------------
