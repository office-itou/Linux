<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <add-on t="map">
    <add_on_products t="list">
<!-- leap -->
      <listentry t="map">
        <alias>repo-oss</alias>
        <media_url>http://download.opensuse.org/distribution/leap/15.6/repo/oss/</media_url>
        <name>Main Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-update</alias>
        <media_url>http://download.opensuse.org/update/leap/15.6/oss/</media_url>
        <name>Main Update Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-sle-update</alias>
        <media_url>http://download.opensuse.org/update/leap/15.6/sle/</media_url>
        <name>Update repository with updates from SUSE Linux Enterprise 15</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-backports-update</alias>
        <media_url>http://download.opensuse.org/update/leap/15.6/backports/</media_url>
        <name>Update repository of openSUSE Backports</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
<!-- leap -->
<!-- leap non-oss
      <listentry t="map">
        <alias>repo-non-oss</alias>
        <media_url>http://download.opensuse.org/distribution/leap/15.6/repo/non-oss/</media_url>
        <name>Non-OSS Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-update-non-oss</alias>
        <media_url>http://download.opensuse.org/update/leap/15.6/non-oss/</media_url>
        <name>Update Repository (Non-Oss)</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-openh264</alias>
        <media_url>http://codecs.opensuse.org/openh264/openSUSE_Leap/</media_url>
        <name>Open H.264 Codec (openSUSE Leap)</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
leap non-oss -->
<!-- tumbleweed
      <listentry t="map">
        <alias>repo-oss</alias>
        <media_url>https://download.opensuse.org/tumbleweed/repo/oss/</media_url>
        <name>Main Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
      <listentry t="map">
        <alias>repo-update</alias>
        <media_url>https://download.opensuse.org/update/tumbleweed/</media_url>
        <name>Main Update Repository</name>
        <priority t="integer">99</priority>
        <product_dir>/</product_dir>
      </listentry>
tumbleweed -->
    </add_on_products>
  </add-on>
  <bootloader t="map">
    <global t="map">
      <append>-B console=force-text</append>
      <cpu_mitigations>auto</cpu_mitigations>
    </global>
    <loader_type>grub2-efi</loader_type>
  </bootloader>
  <deploy_image t="map">
    <image_installation t="boolean">true</image_installation>
  </deploy_image>
  <general t="map">
    <self_update config:type="boolean">true</self_update>
<!--
    <semi-automatic config:type="list">
      <semi-automatic_entry>networking</semi-automatic_entry>
    </semi-automatic>
-->
    <mode t="map">
      <confirm t="boolean">false</confirm>
      <second_stage t="boolean">false</second_stage>
    </mode>
  </general>
<!-- fixed address
  <host t="map">
    <hosts t="list">
      <hosts_entry t="map">
        <host_address>192.168.1.1</host_address>
        <names t="list">
          <name>sv-opensuse.workgroup sv-opensuse</name>
        </names>
      </hosts_entry>
    </hosts>
  </host>
fixed address -->
  <language t="map">
    <language>ja_JP</language>
    <languages>ja_JP</languages>
  </language>
  <timezone t="map">
    <hwclock>UTC</hwclock>
    <timezone>Asia/Tokyo</timezone>
  </timezone>
  <networking t="map">
    <backend>network_manager</backend>
<!-- fixed address
    <dns t="map">
      <dhcp_hostname t="boolean">false</dhcp_hostname>
      <hostname>sv-opensuse.workgroup</hostname>
      <nameservers t="list">
        <nameserver>192.168.1.254</nameserver>
      </nameservers>
      <resolv_conf_policy>auto</resolv_conf_policy>
      <searchlist t="list">
        <search>workgroup</search>
      </searchlist>
    </dns>
    <interfaces t="list">
      <interface t="map">
        <bootproto>static</bootproto>
        <ipaddr>192.168.1.1</ipaddr>
        <name>eth0</name>
        <prefixlen>24</prefixlen>
        <startmode>auto</startmode>
      </interface>
    </interfaces>
    <ipv6 t="boolean">true</ipv6>
    <keep_install_network t="boolean">true</keep_install_network>
    <managed t="boolean">true</managed>
    <routing t="map">
      <routes t="list">
        <route t="map">
          <destination>default</destination>
          <device>eth0</device>
          <gateway>192.168.1.254</gateway>
          <netmask>-</netmask>
        </route>
      </routes>
    </routing>
fixed address -->
  </networking>
  <ntp-client t="map">
    <ntp_policy>auto</ntp_policy>
    <ntp_servers t="list">
      <ntp_server t="map">
        <address>ntp.nict.jp</address>
        <iburst t="boolean">true</iburst>
        <offline t="boolean">false</offline>
      </ntp_server>
    </ntp_servers>
    <ntp_sync>systemd</ntp_sync>
  </ntp-client>
  <partitioning t="list">
    <drive t="map">
      <device>/dev/nvme0n1</device>
      <initialize t="boolean">true</initialize>
      <partitions t="list"/>
      <type t="symbol">CT_DISK</type>
      <use>all</use>
    </drive>
  </partitioning>
  <proxy t="map">
    <enabled t="boolean">false</enabled>
  </proxy>
<!--
* pre-scripts (very early, before anything else really happens)
* postpartitioning-scripts (after partitioning and mounting to /mnt but before RPM installation)
* chroot-scripts (after the package installation, before the first boot)
* post-scripts (during the first boot of the installed system, no services running)
* init-scripts (during the first boot of the installed system, all services up and running)
-->
<!-- log's directory: /var/adm/autoinstall/logs/ -->
  <scripts t="map">
    <pre-scripts t="list">
      <script t="map">
        <debug t="boolean">false</debug>
        <feedback t="boolean">false</feedback>
        <feedback_type/>
        <filename>zzz_link_up.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <notification/>
        <param-list t="list"/>
        <rerun t="boolean">false</rerun>
        <source>
<![CDATA[
#!/bin/sh
echo "Running pre scripts"
if [ -e /tmp/profile/autoinst.xml ]; then
  cp -a /tmp/profile/autoinst.xml /tmp/
  _NICS_DNS4="$(
    sed /tmp/autoinst.xml                                       \
        -ne '/^[ ]\+<networking .*>$/,/[ ]\+<\/networking>$/ {' \
        -e  '/<nameservers .*>/,/<\/nameservers>/            {' \
        -e  's/\(^ \+\| \+$\)//g                              ' \
        -e  '/^<nameserver>[0-9.]\+<\/nameserver>$/p        }}' \
|   {
      _WORK_DNS4=""
      while IFS= read -r _LINE
      do
        _WORK_TEXT="${_LINE#*<nameserver>}"
        _WORK_TEXT="${_WORK_TEXT%</nameserver>*}"
        _WORK_DNS4="${_WORK_DNS4}${_WORK_DNS4:+ }${_WORK_TEXT}"
      done
      echo "${_WORK_DNS4}"
    }
  )"
  if [ -n "${_NICS_DNS4:-}" ]; then
    sed -i /etc/sysconfig/network/config                                 \
        -e '/NETCONFIG_DNS_STATIC_SERVERS/ s/=.*$/="'"${_NICS_DNS4}"'"/'
    netconfig -f update
    cat /etc/resolv.conf
  fi
  sed /tmp/autoinst.xml                                       \
      -ne '/^[ ]\+<networking .*>$/,/[ ]\+<\/networking>$/ {' \
      -e  '/<interface .*>/,/<\/interface>/                {' \
      -e  's/\(^ \+\| \+$\)//gp                           }}' \
| sed -e  '{:l; N; s/[\r\n]/,/; b l;}'                        \
| sed -e  's/\(<\/interface>\),/\1\n/g'                       \
| while read -r _LINE
  do
    _NICS_MODE="${_LINE#*<startmode>}"
    _NICS_MODE="${_NICS_MODE%</startmode>*}"
    _NICS_NAME="${_LINE#*<name>}"
    _NICS_NAME="${_NICS_NAME%</name>*}"
    _IPV4_PROT="${_LINE#*<bootproto>}"
    _IPV4_PROT="${_IPV4_PROT%</bootproto>*}"
    _IPV4_ADDR=""
    _IPV4_BITS=""
    case "${_IPV4_PROT}" in
      static)
        _IPV4_ADDR="${_LINE#*<ipaddr>}"
        _IPV4_ADDR="${_IPV4_ADDR%</ipaddr>*}"
        _IPV4_BITS="${_LINE#*<prefixlen>}"
        _IPV4_BITS="${_IPV4_BITS%</prefixlen>*}"
        cat <<- _EOT_ | sed -e '/^ [^ ]\+/ s/^ *//g' -e 's/^ \+$//g' > /etc/sysconfig/network/ifcfg-"${_NICS_NAME}"
BOOTPROTO='${_IPV4_PROT:-none}'
STARTMODE='${_NICS_MODE:-none}'
IPADDR=${_IPV4_ADDR:-}${_IPV4_BITS:+"/${_IPV4_BITS}"}
_EOT_
        ;;
      *)
        cat <<- _EOT_ | sed -e '/^ [^ ]\+/ s/^ *//g' -e 's/^ \+$//g' > /etc/sysconfig/network/ifcfg-"${_NICS_NAME}"
BOOTPROTO='${_IPV4_PROT:-none}'
STARTMODE='${_NICS_MODE:-none}'
_EOT_
        ;;
    esac
    echo "[${_NICS_NAME},${_IPV4_PROT},${_IPV4_ADDR},${_IPV4_BITS},${_NICS_MODE}]"
    if [ "${_NICS_MODE}" != "none" ] && [ "${_IPV4_PROT}" != "none" ]; then
      echo "set ${_NICS_NAME} link down"
      ifdown "${_NICS_NAME}" || true && sleep 3
      echo "set ${_NICS_NAME} link up"
      ifup "${_NICS_NAME}" || true && sleep 3
    fi
  done
fi
ip address show
echo "Complete pre scripts"
exit 0
]]>
        </source>
      </script>
    </pre-scripts>
    <chroot-scripts t="list">
      <script t="map">
        <chrooted t="boolean">false</chrooted>
        <debug t="boolean">false</debug>
        <feedback t="boolean">false</feedback>
        <feedback_type/>
        <filename>zzz_cmdline.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <notification/>
        <param-list t="list"/>
        <rerun t="boolean">false</rerun>
        <source>
<![CDATA[
#!/bin/sh
echo "Running chroot (no chrooted) scripts"
if [ -e /var/log/YaST2/y2start.log ]; then
  _AUTO_YAST="$(sed -ne '/declare -x AutoYaST=/p' /var/log/YaST2/y2start.log)"
  _AUTO_YAST="${_AUTO_YAST#*\"}"
  _AUTO_YAST="${_AUTO_YAST%\"*}"
  _PROT_NAME="${_AUTO_YAST%%//*}"
  _XMLS_PATH="${_AUTO_YAST#*//}"
  _XMLS_DIRS="${_XMLS_PATH#*/*/*/}"
  _XMLS_NAME="${_XMLS_DIRS##*/}"
  _XMLS_DIRS="${_XMLS_DIRS%"${_XMLS_NAME:-}"}"
  _XMLS_DIRS="${_XMLS_DIRS%/}"
  _DEVS_PATH="${_XMLS_PATH%"${_XMLS_DIRS:+"/${_XMLS_DIRS}"}/${_XMLS_NAME:-}"}"
  case "${_PROT_NAME:-}" in
    device:     ) mkdir -p /media; mount -r "/dev/${_DEVS_PATH}" /media; cp "/media/${_XMLS_DIRS%/*}/late_command.sh" /tmp/; umount /media;;
    http:|https:) curl -L -# -R -S -o /tmp/late_command.sh "${_AUTO_YAST%/*}"/late_command.sh;;
    *           ) ;;
  esac
fi
if [ -e /tmp/autoinst.xml ]; then
  mkdir -p /mnt/var/adm/installer/autoyast
  chmod 0600 /mnt/var/adm/installer/autoyast
  cp -a /tmp/autoinst.xml /mnt/var/adm/installer/autoyast/
fi
if [ -e /tmp/late_command.sh ]; then
  mkdir -p /mnt/var/adm/installer/autoyast
  chmod 0600 /mnt/var/adm/installer/autoyast
  cp -a /tmp/late_command.sh /mnt/var/adm/installer/autoyast/
  chmod +x /mnt/var/adm/installer/autoyast/late_command.sh
fi
echo "Complete chroot (no chrooted) scripts"
exit 0
]]>
        </source>
      </script>
      <script t="map">
        <chrooted t="boolean">true</chrooted>
        <debug t="boolean">false</debug>
        <feedback t="boolean">false</feedback>
        <feedback_type/>
        <filename>zzz_exec.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <notification/>
        <param-list t="list"/>
        <rerun t="boolean">false</rerun>
        <source>
<![CDATA[
#!/bin/sh
echo "Running chroot (chrooted) scripts"
if [ -e /var/adm/installer/autoyast/late_command.sh ]; then
  /var/adm/installer/autoyast/late_command.sh | tee -a /var/adm/installer/autoyast/late_command.sh.log
fi
echo "Complete chroot (chrooted) scripts"
exit 0
]]>
        </source>
      </script>
    </chroot-scripts>
  </scripts>
  <services-manager t="map">
    <default_target>graphical</default_target>
    <services t="map">
      <enable t="list">
        <service>firewalld</service>
        <service>systemd-resolved</service>
        <service>systemd-timesyncd</service>
        <service>NetworkManager</service>
        <service>dnsmasq</service>
        <service>sshd</service>
        <service>apache2</service>
        <service>smb</service>
        <service>nmb</service>
        <service>winbind</service>
      </enable>
      <disable t="list">
<!--
        <service>avahi-daemon</service>
-->
        <service>wicked</service>
      </disable>
      <on_demand t="list">
<!--
        <listentry>pcscd</listentry>
-->
      </on_demand>
    </services>
  </services-manager>
  <software t="map">
    <install_recommended t="boolean">true</install_recommended>
    <instsource/>
    <packages t="list">
      <package>sudo</package>
      <package>firewalld</package>
      <package>traceroute</package>
      <package>NetworkManager</package>
      <package>bash-completion</package>
      <package>curl</package>
      <package>vim</package>
      <package>bc</package>
      <package>tree</package>
      <package>openssh-server</package>
      <package>systemd-network</package>
      <package>dnsmasq</package>
      <package>tftp</package>
      <package>bind-utils</package>
      <package>apache2</package>
      <package>samba</package>
      <package>samba-client</package>
      <package>cifs-utils</package>
      <package>samba-winbind</package>
      <package>open-vm-tools</package>
      <package>open-vm-tools-desktop</package>
      <package>fuse</package>
      <package>glibc-i18ndata</package>
      <package>glibc-locale</package>
      <package>less</package>
      <package>wget</package>
      <package>which</package>
      <package>zypper</package>
    </packages>
    <patterns t="list">
      <pattern>apparmor</pattern>
      <pattern>base</pattern>
      <pattern>basesystem</pattern>
      <pattern>documentation</pattern>
      <pattern>enhanced_base</pattern>
      <pattern>minimal_base</pattern>
<!-- desktop lxde
      <pattern>lxde</pattern>
desktop lxde -->
    </patterns>
    <products t="list">
      <product>Leap</product>
    </products>
  </software>
  <users t="list">
    <user t="map">
      <encrypted t="boolean">false</encrypted>
      <fullname>root</fullname>
      <user_password>r00t</user_password>
      <username>root</username>
    </user>
    <user t="map">
      <encrypted t="boolean">false</encrypted>
      <fullname>Master</fullname>
      <user_password>master</user_password>
      <username>master</username>
    </user>
  </users>
  <groups t="list">
    <group t="map">
      <groupname>wheel</groupname>
      <userlist>master</userlist>
    </group>
  </groups>
</profile>
<!-- https://doc.opensuse.org/projects/autoyast/ -->
<!-- https://doc.opensuse.org/documentation/leap/startup/html/book-startup/cha-boot-parameters.html -->
