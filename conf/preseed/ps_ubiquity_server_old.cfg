#_preseed_V1
# *****************************************************************************
# Contents of the preconfiguration file (for ubuntu) : x86/amd64
# *****************************************************************************
# == Unattended Installation ==================================================
##d-i auto-install/enable boolean true
  d-i debconf/priority select high
# d-i debconf/priority select low
# d-i hw-detect/load_firmware boolean true
##d-i hw-detect/select_modules multiselect usb-storage (USB storage)
# -- anna ---------------------------------------------------------------------
  d-i anna/choose_modules multiselect netcfg
# -- Live media ---------------------------------------------------------------
# d-i live-installer/net-image string _IMAGE_
# d-i live-installer/enable boolean false
# d-i live-installer/mode select normal
# d-i debian-installer/main-menu/item-failure error 
# d-i debian-installer/missing-provide select Install the system
# == Ubiquity =================================================================
# ubiquity ubiquity/hide_slideshow boolean true
  ubiquity ubiquity/download_updates boolean true
  ubiquity ubiquity/use_nonfree boolean true
  ubiquity ubiquity/install_oem boolean true
  ubiquity ubiquity/reboot boolean true
  ubiquity ubiquity/success_command string \
      exec 2>&1; \
      export LANG=C; \
      FUNC_NAME="late_command"; \
      echo "### start ${FUNC_NAME} ###"; \
      TGET_ROOT=""; \
      if [ -d "/target/." ]; then \
          TGET_ROOT="/target"; \
      fi; \
      SEED_TYPE="preseed"; \
      PROG_NAME="/var/log/installer/${SEED_TYPE}/${SEED_TYPE}_late_command.sh"; \
      LOGS_NAME="${TGET_ROOT}${PROG_NAME%.*}.targets.log"; \
      COMD_PARM="${TGET_ROOT}${PROG_NAME%.*}.prm"; \
      mkdir -p "${TGET_ROOT}${PROG_NAME%/*}"; \
      echo "TGET_ROOT=${TGET_ROOT}" >> "${LOGS_NAME}" 2>&1; \
      echo "SEED_TYPE=${SEED_TYPE}" >> "${LOGS_NAME}" 2>&1; \
      echo "PROG_NAME=${PROG_NAME}" >> "${LOGS_NAME}" 2>&1; \
      echo "LOGS_NAME=${LOGS_NAME}" >> "${LOGS_NAME}" 2>&1; \
      echo "COMD_PARM=${COMD_PARM}" >> "${LOGS_NAME}" 2>&1; \
      cat /proc/cmdline > "${COMD_PARM}"; \
      cd "${TGET_ROOT}${PROG_NAME%/*}" || return 1; \
      if [ -f "/preseed.cfg" ]; then \
          cp "/preseed.cfg"      ./; \
          cp "/${PROG_NAME##*/}" ./; \
      fi; \
      COMD_LINE="$(cat "${COMD_PARM}")"; \
      echo "COMD_LINE=${COMD_LINE}" >> "${LOGS_NAME}" 2>&1; \
      for LINE in ${COMD_LINE}; \
      do \
          SEED_ADDR=""; \
          echo "LINE=${LINE}" >> "${LOGS_NAME}" 2>&1; \
          case "${LINE}" in \
              iso-url=*.iso  | url=*.iso )                           ;; \
              preseed/file=* | file=*    ) SEED_ADDR="${LINE#*file=}";; \
              preseed/url=*  | url=*     ) SEED_ADDR="${LINE#*url=}" ;; \
              ds=nocloud*                ) SEED_ADDR="${LINE#*\;s*=}";; \
              *                          )                           ;; \
          esac; \
          echo "SEED_ADDR=${SEED_ADDR}" >> "${LOGS_NAME}" 2>&1; \
          case "${SEED_ADDR}" in \
              http://* | https://* ) \
                  case "${SEED_TYPE}" in \
                      preseed ) wget -O preseed.cfg "${SEED_ADDR}" >> "${LOGS_NAME}" 2>&1;; \
                      nocloud ) wget "${SEED_ADDR}/user-data"      >> "${LOGS_NAME}" 2>&1;; \
                      *       )                                                     ;; \
                  esac; \
                  wget "${SEED_ADDR%/*}/${PROG_NAME##*/}" >> "${LOGS_NAME}" 2>&1; \
                  ;; \
              file://* | /*        ) \
                  SEED_FILE="${SEED_ADDR#*:/}"; \
                  if [ -f "${TGET_ROOT}/media${SEED_FILE}" ]; then \
                      SEED_FILE="${TGET_ROOT}/media${SEED_FILE}"; \
                  fi; \
                  echo "SEED_FILE=${SEED_FILE}" >> "${LOGS_NAME}" 2>&1; \
                  case "${SEED_TYPE}" in \
                      preseed ) \
                          cp "${SEED_FILE}"                     ./preseed.cfg >> "${LOGS_NAME}" 2>&1; \
                          cp "${SEED_FILE%/*}/${PROG_NAME##*/}" ./            >> "${LOGS_NAME}" 2>&1; \
                          ;; \
                      nocloud ) \
                          cp "${SEED_FILE}/user-data"        ./ >> "${LOGS_NAME}" 2>&1; \
                          cp "${SEED_FILE}/${PROG_NAME##*/}" ./ >> "${LOGS_NAME}" 2>&1; \
                          ;; \
                      *       ) ;; \
                  esac; \
                  ;; \
              *                    ) ;; \
          esac; \
      done; \
      if [ -n "${TGET_ROOT}${PROG_NAME:-}" ]; then \
          if [ -f "${TGET_ROOT}${PROG_NAME}" ]; then \
              echo "=== start ${TGET_ROOT}${PROG_NAME} ===" >> "${LOGS_NAME}" 2>&1; \
              if [ ! -x "${TGET_ROOT}${PROG_NAME}" ]; then \
                 chmod +x "${TGET_ROOT}${PROG_NAME}"; \
              fi; \
              if [ -n "${TGET_ROOT}" ]; then \
                  if [ -n "${SUBIQUITY_ROOT:-}" ]; then \
                      curtin in-target --target=/target -- sh -c "${PROG_NAME} -p -b -n s -n h -s; 2>&1" >> "${LOGS_NAME}" 2>&1; \
                  else \
                      in-target --pass-stdout sh -c "${PROG_NAME} -p -b -n s -n h -s; 2>&1" >> "${LOGS_NAME}" 2>&1; \
                  fi; \
                  if [ -f "/usr/lib/finish-install.d/55netcfg-copy-config" ]; then \
                      :; \
                  fi; \
              else \
                  "${TGET_ROOT}${PROG_NAME}" -p -b -n s -n h -s 2>&1 >> "${LOGS_NAME}" 2>&1; \
              fi; \
              echo "=== complete ${TGET_ROOT}${PROG_NAME} ===" >> "${LOGS_NAME}" 2>&1; \
          fi; \
      fi; \
      echo "### complete ${FUNC_NAME} ###";
# ubiquity ubiquity/success_command string \
#     in-target --pass-stdout systemctl disable connman.service;
# == Localization =============================================================
  d-i localechooser/translation/warn-light boolean true
##d-i localechooser/translation/warn-severe boolean true
##d-i debian-installer/locale select ja_JP.UTF-8
  d-i debian-installer/locale string ja_JP.UTF-8
  d-i debian-installer/language string ja
  d-i debian-installer/country string JP
# d-i localechooser/supported-locales multiselect en_US.UTF-8, ja_JP.UTF-8
# -- Keyboard selection. ------------------------------------------------------
##d-i console-setup/ask_detect string false
  d-i keyboard-configuration/xkb-keymap select jp
# d-i keyboard-configuration/toggle select No toggling
  d-i keyboard-configuration/layoutcode string jp
##d-i keyboard-configuration/variant select Japanese
##d-i keyboard-configuration/modelcode string pc105
# == Network configuration ====================================================
##d-i netcfg/target_network_config select Network Manager
##d-i netcfg/target_network_config select ifupdown
# d-i netcfg/enable boolean true
#*d-i netcfg/choose_interface select auto
# d-i netcfg/choose_interface select eth1
# d-i netcfg/link_wait_timeout string 10
# d-i netcfg/dhcp_timeout string 60
# d-i netcfg/dhcpv6_timeout string 60
# -- Static network configuration. --------------------------------------------
#*d-i netcfg/disable_autoconfig boolean true
# d-i netcfg/dhcp_failed note
##d-i netcfg/dhcp_options string Configure network manually
#*d-i netcfg/dhcp_options select Configure network manually
# -- IPv4 example -------------------------------------------------------------
#*d-i netcfg/get_ipaddress string 192.168.1.1
#*d-i netcfg/get_netmask string 255.255.255.0
#*d-i netcfg/get_gateway string 192.168.1.254
#*d-i netcfg/get_nameservers string 192.168.1.254
#*d-i netcfg/get_ipaddress seen false
#*d-i netcfg/get_netmask seen false
#*d-i netcfg/get_gateway seen false
#*d-i netcfg/get_nameservers seen false
# d-i netcfg/confirm_static boolean true
# -- IPv6 example -------------------------------------------------------------
# d-i netcfg/get_ipaddress string fc00::2
# d-i netcfg/get_netmask string ffff:ffff:ffff:ffff::
# d-i netcfg/get_gateway string fc00::1
# d-i netcfg/get_nameservers string fc00::1
# d-i netcfg/confirm_static boolean true
# -- hostname and domain names ------------------------------------------------
#*d-i netcfg/get_hostname string sv-ubuntu
#*d-i netcfg/get_domain string workgroup
#*d-i netcfg/get_hostname seen false
#*d-i netcfg/get_domain seen false
# d-i netcfg/hostname string somehost
# -- Disable that annoying WEP key dialog -------------------------------------
# d-i netcfg/wireless_wep string
# -- The wacky dhcp hostname that some ISPs use as a password of sorts --------
# d-i netcfg/dhcp_hostname string radish
# -- If you want to completely disable firmware lookup ------------------------
# d-i hw-detect/firmware-lookup string never
# -- If non-free firmware is needed for the network or other hardware ---------
# d-i hw-detect/load_firmware boolean true
# == Network console ==========================================================
# d-i anna/choose_modules string network-console
# d-i network-console/authorized_keys_url string http://10.0.0.1/openssh-key
# d-i network-console/password password r00tme
# d-i network-console/password-again password r00tme
# == Mirror settings ==========================================================
# d-i mirror/protocol string ftp
  d-i mirror/protocol string http
##d-i mirror/protocol string https
##d-i mirror/protocol select http
##d-i mirror/protocol select https
  d-i mirror/country string JP
##d-i mirror/http/countries select JP
  d-i mirror/http/hostname string archive.ubuntu.com
  d-i mirror/http/directory string /ubuntu
  d-i mirror/http/proxy string
  d-i mirror/http/mirror select archive.ubuntu.com
##d-i mirror/https/countries select JP
##d-i mirror/https/hostname string archive.ubuntu.com
##d-i mirror/https/directory string /ubuntu
##d-i mirror/https/proxy string
##d-i mirror/https/mirror select archive.ubuntu.com
# -- Suite to install ---------------------------------------------------------
# d-i mirror/suite string stable
# d-i mirror/suite string testing
##d-i mirror/suite select stable
##d-i mirror/suite select testing
# -- Suite to use for loading installer components (optional) -----------------
# d-i mirror/udeb/suite string testing
# == Account setup ============================================================
  d-i passwd/root-login boolean false
# d-i passwd/make-user boolean true
# -- Root password, either in clear text or encrypted -------------------------
# d-i passwd/root-password password r00tme
# d-i passwd/root-password-again password r00tme
# d-i passwd/root-password-crypted password [crypt(3) hash]
# -- Normal user's password, either in clear text or encrypted ----------------
  d-i passwd/user-fullname string Master
  d-i passwd/username string master
  d-i passwd/user-password password master
  d-i passwd/user-password-again password master
# d-i passwd/user-password-crypted password [crypt(3) hash]
# d-i passwd/user-uid string 1010
# d-i passwd/user-default-groups string audio cdrom video
# -----------------------------------------------------------------------------
  d-i user-setup/allow-password-weak string true
##d-i user-setup/encrypt-home string false
# == Clock and time zone setup ================================================
  d-i clock-setup/utc boolean true
  d-i time/zone select Asia/Tokyo
##d-i time/zone select Asia/Tokyo
##d-i clock-setup/hwclock-wait boolean false
##d-i clock-setup/system-time-changed boolean true
# -- Controls whether to use NTP to set the clock during the install ----------
# d-i clock-setup/ntp boolean true
  d-i clock-setup/ntp-server string ntp.nict.jp
# == Partitioning =============================================================
  d-i partman/unmount_active boolean true
  d-i partman/early_command string \
      lvremove --select all -ff -y; \
      vgremove --select all -ff -y; \
      pvremove /dev/nvme0n1* -ff -y; \
      dd if=/dev/zero of=/dev/nvme0n1 bs=1M count=10; \
      umount /media || umount -l /media || true; \
      exit 0;
# d-i partman/unmount_active boolean true
# d-i partman/early_command string \
#   echo "copy preseed file"; \
#   mkdir -p /preseed; \
#   if [ -d /hd-media/. ]; then \
#     echo "hd-media"; \
#     mkdir -p /preseed; \
#     cp -a /hd-media/preseed/preseed_late_command.sh  /preseed/;            \
#     cp -a "${file}"                                  /preseed/preseed.cfg; \
#   elif [ -d /isodevice/. ]; then \
#     echo "isodevice"; \
#     cp -a /isodevice/preseed/preseed_late_command.sh /preseed/;            \
#     cp -a /isodevice"${file}"                        /preseed/preseed.cfg; \
#   elif [ -d /preseed/. ]; then \
#     echo "preseed"; \
#     file=; \
#     for x in $(cat /proc/cmdline); \
#     do \
#       case ${x} in \
#         file=* ) file=${x#file=*/}; break;; \
#       esac; \
#     done; \
#     cp -a /preseed/preseed_late_command.sh           /preseed/;            \
#     cp -a /preseed/"${file#*/}"                      /preseed/preseed.cfg; \
#   fi; \
#   echo "unmount hd-media or media or isodevice"; \
#   for M in $(mount | sed -n 's%^.* /\(hd-media\|media\) .*$%\1%p'); \
#   do \
#     echo "$M"; \
#     cd /; \
#     umount -f /$M || umount -lf /$M || true; \
#     echo "umount $M"; \
#     sleep 1; \
#   done; \
#   mount | grep -E '{hd-media|media|isodevice}'; \
#   exit 0;
# -----------------------------------------------------------------------------
# d-i partman-auto/init_automatically_partition select biggest_free
  d-i partman-auto/init_automatically_partition select lvm
  d-i partman-auto/disk string /dev/nvme0n1
# d-i partman-auto/disk string /dev/nvme0n1 /dev/sda
# d-i partman-auto/disk string /dev/sda
# d-i partman-auto/method string regular
  d-i partman-auto/method string lvm
# d-i partman-auto/method string crypto
# d-i partman-auto/method string raid
  d-i partman-auto-lvm/guided_size string max
##d-i partman-auto-lvm/new_vg_name string system
##d-i partman-auto-lvm/new_vg_name_exists string
# -----------------------------------------------------------------------------
  d-i partman-lvm/device_remove_lvm boolean true
##d-i partman-lvm/device_remove_lvm_span error true
  d-i partman-md/device_remove_md boolean true
  d-i partman-lvm/confirm boolean true
  d-i partman-lvm/confirm_nooverwrite boolean true
  d-i partman-auto/purge_lvm_from_device string true
  d-i partman-crypto/confirm_nooverwrite boolean false
# -----------------------------------------------------------------------------
  d-i partman-basicfilesystems/no_swap boolean false
##d-i partman-swapfile/percentage string 0
##d-i partman-swapfile/size string 0
# -----------------------------------------------------------------------------
  d-i partman-auto/choose_recipe select atomic
# d-i partman-auto/choose_recipe select home
# d-i partman-auto/choose_recipe select multi
# d-i partman-auto/expert_recipe_file string /hd-media/recipe
# -----------------------------------------------------------------------------
# /dev/nvme0n1p1: 512MB: efi
#      nvme0n1p2: 512MB: /boot
#      nvme0n1p3:    -1: vg00
# /dev/sda1     :    -1: vg01
# vg00-root     :    -1: /
# vg01-home     :    -1: /home
#
# d-i partman-auto/expert_recipe string                                       \
#         boot-lvm ::                                                         \
#               512   512   512 free                                          \
#                 $iflabel{ gpt } $reusemethod{ }                             \
#                 method{ efi } format{ }                                     \
#                 device{ /dev/nvme0n1p1 }                                    \
#             .                                                               \
#               512   512   512 ext3                                          \
#                 $primary{ } $bootable{ }                                    \
#                 method{ format } format{ }                                  \
#                 use_filesystem{ } filesystem{ ext3 }                        \
#                 mountpoint{ /boot }                                         \
#                 device{ /dev/nvme0n1p2 }                                    \
#             .                                                               \
#              1024  1024    -1 ext4                                          \
#                 $primary{ }                                                 \
#                 method{ lvm } vg_name{ vg00 }                               \
#                 device{ /dev/nvme0n1p3 }                                    \
#             .                                                               \
#              1024  1024    -1 ext4                                          \
#                 $primary{ }                                                 \
#                 method{ lvm } vg_name{ vg01 }                               \
#                 device{ /dev/sda1 }                                         \
#             .                                                               \
#              1024  1024    -1 ext4                                          \
#                 $lvmok{ } in_vg{ vg00 } lv_name{ root }                     \
#                 method{ format } format{ }                                  \
#                 use_filesystem{ } filesystem{ ext4 }                        \
#                 mountpoint{ / }                                             \
#             .                                                               \
#              1024  1024    -1 ext4                                          \
#                 $lvmok{ } in_vg{ vg01 } lv_name{ home }                     \
#                 method{ format } format{ }                                  \
#                 use_filesystem{ } filesystem{ ext4 }                        \
#                 mountpoint{ /home }                                         \
#             .
# -----------------------------------------------------------------------------
# d-i partman/default_filesystem string btrfs
# d-i partman/default_filesystem string ext4
# -- This makes partman automatically partition without confirmation. ---------
  d-i partman-partitioning/confirm_write_new_label boolean true
  d-i partman/choose_partition select finish
  d-i partman/confirm boolean true
  d-i partman/confirm_nooverwrite boolean true
  d-i partman-md/confirm boolean true
  d-i partman-md/confirm_nooverwrite boolean false
# -- Force UEFI booting ('BIOS compatibility' will be lost). Default: false. --
  d-i partman-efi/non_efi_system boolean true
# -- Ensure the partition table is GPT - this is required for EFI -------------
# d-i partman-partitioning/choose_label select gpt
# d-i partman-partitioning/default_label string gpt
# -- When disk encryption is enabled, skip wiping the partitions beforehand. --
  d-i partman-auto-crypto/erase_disks boolean true
# -- Controlling how partitions are mounted -----------------------------------
# d-i partman/mount_style select uuid
# == Base system installation =================================================
# d-i base-installer/install-recommends boolean true
##d-i base-installer/kernel/image select linux-image-amd64
# d-i base-installer/kernel/image string linux-image-686
# == Apt setup ================================================================
  d-i apt-setup/cdrom/set-first boolean false
  d-i apt-setup/cdrom/set-next boolean false
  d-i apt-setup/cdrom/set-failed bo lean false
  d-i apt-setup/multiverse boolean true
  d-i apt-setup/restricted boolean true
  d-i apt-setup/universe boolean true
# d-i apt-setup/backports boolean true
# d-i apt-setup/proposed boolean true
# d-i apt-setup/partner boolean true
# d-i apt-setup/disable-cdrom-entries boolean false
  d-i apt-setup/use_mirror boolean true
  d-i apt-setup/services-select multiselect security, updates
  d-i apt-setup/security_host string security.ubuntu.com
# d-i apt-setup/local0/repository string http://local.server/ubuntu stable main
# d-i apt-setup/local0/comment string local server
# d-i apt-setup/local0/source boolean true
# d-i apt-setup/local0/key string http://local.server/key
# d-i apt-setup/local0/key string base64://LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCi4uLgo=
# d-i debian-installer/allow_unauthenticated boolean false
# d-i apt-setup/multiarch string i386
# == Package selection ========================================================
  tasksel tasksel/first multiselect \
    standard
# -----------------------------------------------------------------------------
  d-i pkgsel/run_tasksel boolean true
# -----------------------------------------------------------------------------
  d-i pkgsel/include string \
    apt-transport-https \
    firewalld \
    traceroute \
    network-manager \
    bash-completion \
    build-essential curl vim bc \
    clamav \
    openssh-server \
    dnsmasq tftpd-hpa dnsutils \
    apache2 \
    samba smbclient cifs-utils libnss-winbind
#   ubuntu-desktop ubuntu-gnome-desktop \
#   language-pack-ja language-pack-gnome-ja \
#   fonts-noto \
#   kasumi ibus-anthy \
#   libreoffice-l10n-ja libreoffice-help-ja \
#   firefox-locale-ja thunderbird thunderbird-locale-ja 
# -----------------------------------------------------------------------------
#   ibus-mozc mozc-utils-gui \
# -----------------------------------------------------------------------------
#   pxelinux syslinux-common syslinux-efi
# -----------------------------------------------------------------------------
#   avahi-daemon
#   bind9 bind9utils dnsutils resolvconf \
#   isc-dhcp-server \
#   minidlna \
# -----------------------------------------------------------------------------
# d-i pkgsel/upgrade select none
# d-i pkgsel/upgrade select safe-upgrade
  d-i pkgsel/upgrade select full-upgrade
  d-i pkgsel/update-policy select none
##d-i pkgsel/update-policy select unattended-upgrades
# -----------------------------------------------------------------------------
##d-i popularity-contest/participate string false
  popularity-contest popularity-contest/participate string false
# -----------------------------------------------------------------------------
  d-i pkgsel/install-language-support string true
##d-i shared/default-x-display-manager string lightdm
# -----------------------------------------------------------------------------
  d-i samba-common/dhcp boolean false
# == Boot loader installation =================================================
  d-i grub-installer/only_debian boolean true
  d-i grub-installer/with_other_os boolean false
  d-i grub-installer/bootdev string default
# d-i grub-installer/bootdev string /dev/sda
# d-i grub-installer/bootdev string (hd0,1)
# d-i grub-installer/bootdev string (hd0,1) (hd1,1) (hd2,1)
##d-i grub-installer/force-efi-extra-removable boolean true
# -- Optional password for grub, either in clear text or encrypted ------------
# Optional password for grub, either in clear text
# d-i grub-installer/password password r00tme
# d-i grub-installer/password-again password r00tme
# d-i grub-installer/password-crypted password [MD5 hash]
# --- Use the following option to add additional boot parameters --------------
# d-i debian-installer/add-kernel-opts string nousb
# == Finishing up the installation ============================================
# d-i finish-install/keep-consoles boolean false
  d-i finish-install/reboot_in_progress note
##d-i cdrom-detect/eject string false
# d-i cdrom-detect/eject boolean false
# d-i debian-installer/exit/halt boolean false
# d-i debian-installer/exit/poweroff boolean false
# == Running custom commands during the installation ==========================
#*d-i preseed/run string \
#*    https://raw.githubusercontent.com/office-itou/Linux/master/pxeboot/preseed/ubuntu/preseed_kill_dhcp.sh
# d-i preseed/early_command string \
#     log-output dd if=/dev/zero of=/dev/nvme0n1 bs=1M count=100; \
#     exit 0;
# d-i partman/early_command string debconf-set partman-auto/disk "$(list-devices disk | head -n1)"
# d-i preseed/late_command string \
#     exec 2>&1; \
#     export LANG=C; \
#     FUNC_NAME="late_command"; \
#     echo "### start ${FUNC_NAME} ###"; \
#     TGET_ROOT=""; \
#     if [ -d "/target/." ]; then \
#         TGET_ROOT="/target"; \
#     fi; \
#     SEED_TYPE="preseed"; \
#     PROG_NAME="/var/log/installer/${SEED_TYPE}/${SEED_TYPE}_late_command.sh"; \
#     LOGS_NAME="${TGET_ROOT}${PROG_NAME%.*}.targets.log"; \
#     COMD_PARM="${TGET_ROOT}${PROG_NAME%.*}.prm"; \
#     mkdir -p "${TGET_ROOT}${PROG_NAME%/*}"; \
#     echo "TGET_ROOT=${TGET_ROOT}" >> "${LOGS_NAME}" 2>&1; \
#     echo "SEED_TYPE=${SEED_TYPE}" >> "${LOGS_NAME}" 2>&1; \
#     echo "PROG_NAME=${PROG_NAME}" >> "${LOGS_NAME}" 2>&1; \
#     echo "LOGS_NAME=${LOGS_NAME}" >> "${LOGS_NAME}" 2>&1; \
#     echo "COMD_PARM=${COMD_PARM}" >> "${LOGS_NAME}" 2>&1; \
#     cat /proc/cmdline > "${COMD_PARM}"; \
#     cd "${TGET_ROOT}${PROG_NAME%/*}" || return 1; \
#     if [ -f "/preseed.cfg" ]; then \
#         cp "/preseed.cfg"      ./; \
#         cp "/${PROG_NAME##*/}" ./; \
#     fi; \
#     COMD_LINE="$(cat "${COMD_PARM}")"; \
#     echo "COMD_LINE=${COMD_LINE}" >> "${LOGS_NAME}" 2>&1; \
#     for LINE in ${COMD_LINE}; \
#     do \
#         SEED_ADDR=""; \
#         echo "LINE=${LINE}" >> "${LOGS_NAME}" 2>&1; \
#         case "${LINE}" in \
#             iso-url=*.iso  | url=*.iso )                           ;; \
#             preseed/file=* | file=*    ) SEED_ADDR="${LINE#*file=}";; \
#             preseed/url=*  | url=*     ) SEED_ADDR="${LINE#*url=}" ;; \
#             ds=nocloud*                ) SEED_ADDR="${LINE#*\;s*=}";; \
#             *                          )                           ;; \
#         esac; \
#         echo "SEED_ADDR=${SEED_ADDR}" >> "${LOGS_NAME}" 2>&1; \
#         case "${SEED_ADDR}" in \
#             http://* | https://* ) \
#                 case "${SEED_TYPE}" in \
#                     preseed ) wget -O preseed.cfg "${SEED_ADDR}" >> "${LOGS_NAME}" 2>&1;; \
#                     nocloud ) wget "${SEED_ADDR}/user-data"      >> "${LOGS_NAME}" 2>&1;; \
#                     *       )                                                     ;; \
#                 esac; \
#                 wget "${SEED_ADDR%/*}/${PROG_NAME##*/}" >> "${LOGS_NAME}" 2>&1; \
#                 ;; \
#             file://* | /*        ) \
#                 SEED_FILE="${SEED_ADDR#*:/}"; \
#                 if [ -f "${TGET_ROOT}/media${SEED_FILE}" ]; then \
#                     SEED_FILE="${TGET_ROOT}/media${SEED_FILE}"; \
#                 fi; \
#                 echo "SEED_FILE=${SEED_FILE}" >> "${LOGS_NAME}" 2>&1; \
#                 case "${SEED_TYPE}" in \
#                     preseed ) \
#                         cp "${SEED_FILE}"                     ./preseed.cfg >> "${LOGS_NAME}" 2>&1; \
#                         cp "${SEED_FILE%/*}/${PROG_NAME##*/}" ./            >> "${LOGS_NAME}" 2>&1; \
#                         ;; \
#                     nocloud ) \
#                         cp "${SEED_FILE}/user-data"        ./ >> "${LOGS_NAME}" 2>&1; \
#                         cp "${SEED_FILE}/${PROG_NAME##*/}" ./ >> "${LOGS_NAME}" 2>&1; \
#                         ;; \
#                     *       ) ;; \
#                 esac; \
#                 ;; \
#             *                    ) ;; \
#         esac; \
#     done; \
#     if [ -n "${TGET_ROOT}${PROG_NAME:-}" ]; then \
#         if [ -f "${TGET_ROOT}${PROG_NAME}" ]; then \
#             echo "=== start ${TGET_ROOT}${PROG_NAME} ===" >> "${LOGS_NAME}" 2>&1; \
#             if [ ! -x "${TGET_ROOT}${PROG_NAME}" ]; then \
#                chmod +x "${TGET_ROOT}${PROG_NAME}"; \
#             fi; \
#             if [ -n "${TGET_ROOT}" ]; then \
#                 if [ -n "${SUBIQUITY_ROOT:-}" ]; then \
#                     curtin in-target --target=/target -- sh -c "${PROG_NAME} -p -b -n s -n h -s; 2>&1" >> "${LOGS_NAME}" 2>&1; \
#                 else \
#                     in-target --pass-stdout sh -c "${PROG_NAME} -p -b -n s -n h -s; 2>&1" >> "${LOGS_NAME}" 2>&1; \
#                 fi; \
#                 if [ -f "/usr/lib/finish-install.d/55netcfg-copy-config" ]; then \
#                     :; \
#                 fi; \
#             else \
#                 "${TGET_ROOT}${PROG_NAME}" -p -b -n s -n h -s 2>&1 >> "${LOGS_NAME}" 2>&1; \
#             fi; \
#             echo "=== complete ${TGET_ROOT}${PROG_NAME} ===" >> "${LOGS_NAME}" 2>&1; \
#         fi; \
#     fi; \
#     echo "### complete ${FUNC_NAME} ###";
# d-i preseed/late_command string \
#     in-target --pass-stdout systemctl disable connman.service;
# == Preseeding other packages ================================================
# d-i debhelper debconf-utils
#   echo "#_preseed_V1" > file
#   debconf-get-selections --installer >> file
#   debconf-get-selections >> file
#   debconf-set-selections -c preseed.cfg
# == End Of File ==============================================================
